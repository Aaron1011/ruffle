---
source: render/naga-agal/tests/wgsl.rs
assertion_line: 105
expression: output
---
struct FragmentOutput {
    @location(0) member: vec4<f32>,
}

@group(0) @binding(1) 
var<uniform> constant_registers: array<vec4<f32>,28u>;
@group(0) @binding(2) 
var sampler0_: sampler;
@group(0) @binding(3) 
var sampler1_: sampler;
@group(0) @binding(4) 
var sampler2_: sampler;
@group(0) @binding(5) 
var sampler3_: sampler;
@group(0) @binding(6) 
var texture0_: texture_cube<f32>;

@fragment 
fn main(@location(0) param: vec4<f32>) -> FragmentOutput {
    var dest_temp: vec4<f32>;
    var temporary0_: vec4<f32>;
    var temporary1_: vec4<f32>;
    var temporary2_: vec4<f32>;
    var temporary4_: vec4<f32>;
    var temporary3_: vec4<f32>;
    var temporary5_: vec4<f32>;
    var temporary6_: vec4<f32>;
    var temporary7_: vec4<f32>;
    var temporary8_: vec4<f32>;
    var temporary10_: vec4<f32>;
    var temporary9_: vec4<f32>;
    var temporary11_: vec4<f32>;
    var temporary12_: vec4<f32>;
    var temporary13_: vec4<f32>;
    var temporary14_: vec4<f32>;
    var temporary15_: vec4<f32>;
    var temporary16_: vec4<f32>;
    var temporary20_: vec4<f32>;
    var temporary18_: vec4<f32>;
    var temporary17_: vec4<f32>;
    var temporary19_: vec4<f32>;

    let _e8: vec4<f32> = constant_registers[16u];
    temporary0_ = _e8.xxxy;
    let _e15: vec4<f32> = constant_registers[3u];
    temporary1_.x = (param.xxxx * _e15.xxxx).x;
    temporary1_.y = param.yyyy.x;
    let _e26: vec4<f32> = constant_registers[1u];
    let _e27: vec4<f32> = _e26.xxxx;
    temporary1_.z = _e27.z;
    temporary1_.w = _e27.w;
    let _e32: vec4<f32> = temporary1_;
    let _e36: vec4<f32> = constant_registers[16u];
    let _e38: vec4<f32> = (_e32.zzzw * _e36.zzzz);
    temporary1_.z = _e38.z;
    temporary1_.w = _e38.w;
    let _e43: vec4<f32> = temporary1_;
    temporary1_.z = cos(_e43.zzzz).x;
    let _e48: vec4<f32> = temporary1_;
    let _e52: vec4<f32> = constant_registers[16u];
    temporary2_.x = (_e48.zzzz * _e52.wwww).x;
    let _e60: vec4<f32> = constant_registers[1u];
    temporary1_.z = _e60.yyyy.x;
    let _e64: vec4<f32> = temporary1_;
    let _e68: vec4<f32> = constant_registers[16u];
    temporary1_.z = (_e64.zzzz + _e68.yyyy).x;
    let _e73: vec4<f32> = temporary1_;
    let _e77: vec4<f32> = constant_registers[17u];
    temporary1_.z = (_e73.zzzz * _e77.xxxx).x;
    let _e82: vec4<f32> = temporary1_;
    let _e86: vec4<f32> = constant_registers[17u];
    temporary1_.z = max(_e82.zzzz, _e86.yyyy).x;
    let _e91: vec4<f32> = temporary1_;
    temporary1_.w = sin(_e91.wwww).x;
    let _e96: vec4<f32> = temporary1_;
    let _e100: vec4<f32> = constant_registers[16u];
    temporary2_.z = (_e96.wwww * _e100.wwww).x;
    let _e105: vec4<f32> = temporary1_;
    temporary2_.y = _e105.zzzz.x;
    let _e111: vec4<f32> = constant_registers[16u];
    let _e112: vec4<f32> = _e111.xxxx;
    temporary4_.x = _e112.x;
    temporary4_.z = _e112.z;
    let _e120: vec4<f32> = constant_registers[17u];
    temporary4_.y = _e120.zzzz.x;
    let _e126: vec4<f32> = constant_registers[16u];
    temporary1_.w = _e126.yyyy.x;
    let _e130: vec4<f32> = temporary4_;
    let _e132: vec4<f32> = temporary2_;
    let _e134: vec4<f32> = (_e130.xyzz - _e132.xyzz);
    temporary3_.x = _e134.x;
    temporary3_.y = _e134.y;
    temporary3_.z = _e134.z;
    let _e142: vec4<f32> = temporary3_;
    let _e144: vec4<f32> = normalize(_e142.xyzz);
    temporary3_.x = _e144.x;
    temporary3_.y = _e144.y;
    temporary3_.z = _e144.z;
    let _e153: vec4<f32> = constant_registers[16u];
    let _e155: vec4<f32> = temporary3_;
    let _e157: vec3<f32> = cross(_e153.xyx, _e155.xyz);
    let _e162: vec4<f32> = vec4<f32>(_e157.x, _e157.y, _e157.z, 1.0);
    temporary5_.x = _e162.x;
    temporary5_.y = _e162.y;
    temporary5_.z = _e162.z;
    let _e170: vec4<f32> = temporary5_;
    let _e172: vec4<f32> = normalize(_e170.xyzz);
    temporary6_.x = _e172.x;
    temporary6_.y = _e172.y;
    temporary6_.z = _e172.z;
    let _e180: vec4<f32> = temporary3_;
    let _e182: vec4<f32> = temporary6_;
    let _e184: vec3<f32> = cross(_e180.xyz, _e182.xyz);
    let _e189: vec4<f32> = vec4<f32>(_e184.x, _e184.y, _e184.z, 1.0);
    temporary5_.x = _e189.x;
    temporary5_.y = _e189.y;
    temporary5_.z = _e189.z;
    let _e196: vec4<f32> = temporary3_;
    let _e198: vec4<f32> = temporary1_;
    let _e200: vec4<f32> = (_e196.xyzz * _e198.wwww);
    temporary3_.x = _e200.x;
    temporary3_.y = _e200.y;
    temporary3_.z = _e200.z;
    let _e207: vec4<f32> = temporary6_;
    let _e209: vec4<f32> = temporary1_;
    let _e211: vec4<f32> = (_e207.xyzz * _e209.xxxx);
    temporary6_.x = _e211.x;
    temporary6_.y = _e211.y;
    temporary6_.z = _e211.z;
    let _e218: vec4<f32> = temporary3_;
    let _e220: vec4<f32> = temporary6_;
    let _e222: vec4<f32> = (_e218.xyzz + _e220.xyzz);
    temporary7_.x = _e222.x;
    temporary7_.y = _e222.y;
    temporary7_.z = _e222.z;
    let _e230: vec4<f32> = temporary5_;
    let _e232: vec4<f32> = temporary1_;
    let _e234: vec4<f32> = (_e230.xyzz * _e232.yyyy);
    temporary5_.x = _e234.x;
    temporary5_.y = _e234.y;
    temporary5_.z = _e234.z;
    let _e241: vec4<f32> = temporary7_;
    let _e243: vec4<f32> = temporary5_;
    let _e245: vec4<f32> = (_e241.xyzz + _e243.xyzz);
    temporary5_.x = _e245.x;
    temporary5_.y = _e245.y;
    temporary5_.z = _e245.z;
    let _e252: vec4<f32> = temporary5_;
    let _e254: vec4<f32> = normalize(_e252.xyzz);
    temporary8_.x = _e254.x;
    temporary8_.y = _e254.y;
    temporary8_.z = _e254.z;
    let _e262: vec4<f32> = temporary8_;
    let _e263: vec4<f32> = _e262.xyzz;
    temporary10_.x = _e263.x;
    temporary10_.y = _e263.y;
    temporary10_.z = _e263.z;
    let _e271: vec4<f32> = temporary10_;
    let _e272: vec4<f32> = _e271.xyzz;
    temporary9_.x = _e272.x;
    temporary9_.y = _e272.y;
    temporary9_.z = _e272.z;
    let _e282: vec4<f32> = constant_registers[16u];
    let _e283: vec4<f32> = _e282.yxxx;
    temporary11_.x = _e283.x;
    temporary11_.y = _e283.y;
    temporary11_.z = _e283.z;
    let _e291: vec4<f32> = temporary11_;
    let _e295: vec4<f32> = constant_registers[16u];
    if all((_e291.xxxx != _e295.xxxx)) {
        let _e301: vec4<f32> = constant_registers[16u];
        temporary1_.z = _e301.xxxx.x;
        let _e307: vec4<f32> = constant_registers[17u];
        temporary4_.z = _e307.wwww.x;
        let _e313: vec4<f32> = constant_registers[16u];
        let _e314: vec4<f32> = _e313.xyxx;
        temporary3_.x = _e314.x;
        temporary3_.y = _e314.y;
        temporary3_.z = _e314.z;
        let _e321: vec4<f32> = temporary3_;
        let _e322: vec4<f32> = _e321.xyzz;
        temporary12_.x = _e322.x;
        temporary12_.y = _e322.y;
        temporary12_.z = _e322.z;
        let _e332: vec4<f32> = constant_registers[17u];
        temporary1_.x = _e332.wwww.x;
        let _e336: vec4<f32> = temporary2_;
        let _e340: vec4<f32> = constant_registers[16u];
        let _e342: vec4<f32> = (_e336.xyzz - _e340.xxxx);
        temporary13_.x = _e342.x;
        temporary13_.y = _e342.y;
        temporary13_.z = _e342.z;
        let _e350: vec4<f32> = temporary13_;
        let _e352: vec4<f32> = temporary12_;
        temporary1_.y = dot(_e350.xyzz.xyz, _e352.xyzz.xyz);
        let _e358: vec4<f32> = temporary1_;
        temporary1_.y = -(_e358.yyyy).x;
        let _e363: vec4<f32> = temporary9_;
        let _e365: vec4<f32> = temporary12_;
        temporary12_.x = dot(_e363.xyzz.xyz, _e365.xyzz.xyz);
        let _e371: vec4<f32> = temporary1_;
        let _e373: vec4<f32> = temporary12_;
        temporary12_.y = (_e371.yyyy / _e373.xxxx).x;
        let _e378: vec4<f32> = temporary12_;
        temporary1_.y = _e378.yyyy.x;
        let _e384: vec4<f32> = constant_registers[16u];
        let _e386: vec4<f32> = temporary1_;
        temporary1_.w = f32((_e384.xxxx.x + _e386.yyyy.x));
        let _e393: vec4<f32> = temporary1_;
        let _e397: vec4<f32> = constant_registers[16u];
        if all((_e393.wwww != _e397.xxxx)) {
            let _e401: vec4<f32> = temporary1_;
            temporary1_.x = _e401.yyyy.x;
        }
        let _e405: vec4<f32> = temporary1_;
        temporary4_.y = _e405.xxxx.x;
        let _e409: vec4<f32> = temporary4_;
        let _e411: vec4<f32> = temporary4_;
        temporary1_.x = f32((_e409.yyyy.x + _e411.zzzz.x));
        let _e418: vec4<f32> = temporary1_;
        let _e422: vec4<f32> = constant_registers[16u];
        if all((_e418.xxxx != _e422.xxxx)) {
            let _e426: vec4<f32> = temporary4_;
            temporary4_.z = _e426.yyyy.x;
            let _e430: vec4<f32> = temporary3_;
            let _e431: vec4<f32> = _e430.xyzz;
            temporary6_.x = _e431.x;
            temporary6_.y = _e431.y;
            temporary6_.z = _e431.z;
            let _e440: vec4<f32> = constant_registers[16u];
            temporary1_.z = _e440.yyyy.x;
        }
        let _e444: vec4<f32> = temporary2_;
        let _e445: vec4<f32> = _e444.xyzz;
        temporary5_.x = _e445.x;
        temporary5_.y = _e445.y;
        temporary5_.z = _e445.z;
        let _e452: vec4<f32> = temporary9_;
        let _e453: vec4<f32> = _e452.xyzz;
        temporary10_.x = _e453.x;
        temporary10_.y = _e453.y;
        temporary10_.z = _e453.z;
        let _e462: vec4<f32> = constant_registers[4u];
        let _e463: vec4<f32> = _e462.xyzz;
        temporary8_.x = _e463.x;
        temporary8_.y = _e463.y;
        temporary8_.z = _e463.z;
        let _e472: vec4<f32> = constant_registers[6u];
        temporary14_.x = _e472.xxxx.x;
        let _e477: vec4<f32> = temporary3_;
        let _e478: vec4<f32> = _e477.xyzz;
        temporary15_.x = _e478.x;
        temporary15_.y = _e478.y;
        temporary15_.z = _e478.z;
        let _e488: vec4<f32> = constant_registers[17u];
        temporary1_.x = _e488.wwww.x;
        let _e492: vec4<f32> = temporary5_;
        let _e494: vec4<f32> = temporary8_;
        let _e496: vec4<f32> = (_e492.xyzz - _e494.xyzz);
        temporary16_.x = _e496.x;
        temporary16_.y = _e496.y;
        temporary16_.z = _e496.z;
        let _e504: vec4<f32> = temporary16_;
        let _e506: vec4<f32> = temporary10_;
        temporary14_.z = dot(_e504.xyzz.xyz, _e506.xyzz.xyz);
        let _e512: vec4<f32> = temporary14_;
        let _e514: vec4<f32> = temporary14_;
        let _e516: vec4<f32> = (_e512.zzzx * _e514.zzzx);
        temporary4_.x = _e516.x;
        temporary4_.w = _e516.w;
        let _e521: vec4<f32> = temporary16_;
        let _e523: vec4<f32> = temporary16_;
        temporary1_.y = dot(_e521.xyzz.xyz, _e523.xyzz.xyz);
        let _e529: vec4<f32> = temporary4_;
        let _e531: vec4<f32> = temporary1_;
        temporary1_.w = (_e529.xxxx - _e531.yyyy).x;
        let _e536: vec4<f32> = temporary1_;
        let _e538: vec4<f32> = temporary4_;
        temporary13_.x = (_e536.wwww + _e538.wwww).x;
        let _e543: vec4<f32> = temporary13_;
        temporary1_.w = _e543.xxxx.x;
        let _e549: vec4<f32> = constant_registers[16u];
        let _e551: vec4<f32> = temporary1_;
        temporary2_.w = f32((_e549.xxxx.x + _e551.wwww.x));
        let _e558: vec4<f32> = temporary2_;
        let _e562: vec4<f32> = constant_registers[16u];
        if all((_e558.wwww != _e562.xxxx)) {
            let _e566: vec4<f32> = temporary1_;
            temporary1_.w = sqrt(_e566.wwww).x;
            let _e571: vec4<f32> = temporary14_;
            temporary1_.y = -(_e571.zzzz).x;
            let _e576: vec4<f32> = temporary1_;
            let _e578: vec4<f32> = temporary1_;
            temporary2_.w = (_e576.yyyy - _e578.wwww).x;
            let _e585: vec4<f32> = constant_registers[16u];
            let _e587: vec4<f32> = temporary2_;
            temporary1_.y = f32((_e585.xxxx.x + _e587.wwww.x));
            let _e594: vec4<f32> = temporary1_;
            let _e598: vec4<f32> = constant_registers[16u];
            if all((_e594.yyyy != _e598.xxxx)) {
                let _e602: vec4<f32> = temporary2_;
                temporary1_.x = _e602.wwww.x;
                let _e606: vec4<f32> = temporary10_;
                let _e608: vec4<f32> = temporary2_;
                let _e610: vec4<f32> = (_e606.xyzz * _e608.wwww);
                temporary13_.x = _e610.x;
                temporary13_.y = _e610.y;
                temporary13_.z = _e610.z;
                let _e617: vec4<f32> = temporary5_;
                let _e619: vec4<f32> = temporary13_;
                let _e621: vec4<f32> = (_e617.xyzz + _e619.xyzz);
                temporary12_.x = _e621.x;
                temporary12_.y = _e621.y;
                temporary12_.z = _e621.z;
                let _e628: vec4<f32> = temporary12_;
                let _e630: vec4<f32> = temporary8_;
                let _e632: vec4<f32> = (_e628.xyzz - _e630.xyzz);
                temporary14_.x = _e632.x;
                temporary14_.y = _e632.y;
                temporary14_.z = _e632.z;
                let _e639: vec4<f32> = temporary14_;
                let _e641: vec4<f32> = normalize(_e639.xyzz);
                temporary16_.x = _e641.x;
                temporary16_.y = _e641.y;
                temporary16_.z = _e641.z;
                let _e648: vec4<f32> = temporary16_;
                let _e649: vec4<f32> = _e648.xyzz;
                temporary20_.x = _e649.x;
                temporary20_.y = _e649.y;
                temporary20_.z = _e649.z;
                let _e657: vec4<f32> = temporary20_;
                let _e658: vec4<f32> = _e657.xyzz;
                temporary15_.x = _e658.x;
                temporary15_.y = _e658.y;
                temporary15_.z = _e658.z;
            }
        }
        let _e665: vec4<f32> = temporary1_;
        temporary4_.y = _e665.xxxx.x;
        let _e669: vec4<f32> = temporary15_;
        let _e670: vec4<f32> = _e669.xyzz;
        temporary3_.x = _e670.x;
        temporary3_.y = _e670.y;
        temporary3_.z = _e670.z;
        let _e677: vec4<f32> = temporary4_;
        let _e679: vec4<f32> = temporary4_;
        temporary1_.x = f32((_e677.yyyy.x + _e679.zzzz.x));
        let _e686: vec4<f32> = temporary1_;
        let _e690: vec4<f32> = constant_registers[16u];
        if all((_e686.xxxx != _e690.xxxx)) {
            let _e694: vec4<f32> = temporary4_;
            temporary4_.z = _e694.yyyy.x;
            let _e698: vec4<f32> = temporary3_;
            let _e699: vec4<f32> = _e698.xyzz;
            temporary6_.x = _e699.x;
            temporary6_.y = _e699.y;
            temporary6_.z = _e699.z;
            let _e708: vec4<f32> = constant_registers[5u];
            let _e709: vec4<f32> = _e708.xyzz;
            temporary7_.x = _e709.x;
            temporary7_.y = _e709.y;
            temporary7_.z = _e709.z;
            let _e718: vec4<f32> = constant_registers[18u];
            temporary1_.z = _e718.xxxx.x;
        }
        let _e722: vec4<f32> = temporary2_;
        let _e723: vec4<f32> = _e722.xyzz;
        temporary5_.x = _e723.x;
        temporary5_.y = _e723.y;
        temporary5_.z = _e723.z;
        let _e730: vec4<f32> = temporary9_;
        let _e731: vec4<f32> = _e730.xyzz;
        temporary10_.x = _e731.x;
        temporary10_.y = _e731.y;
        temporary10_.z = _e731.z;
        let _e740: vec4<f32> = constant_registers[7u];
        let _e741: vec4<f32> = _e740.xyzz;
        temporary8_.x = _e741.x;
        temporary8_.y = _e741.y;
        temporary8_.z = _e741.z;
        let _e750: vec4<f32> = constant_registers[9u];
        temporary15_.x = _e750.xxxx.x;
        let _e754: vec4<f32> = temporary3_;
        let _e755: vec4<f32> = _e754.xyzz;
        temporary18_.x = _e755.x;
        temporary18_.y = _e755.y;
        temporary18_.z = _e755.z;
        let _e765: vec4<f32> = constant_registers[17u];
        temporary1_.x = _e765.wwww.x;
        let _e769: vec4<f32> = temporary5_;
        let _e771: vec4<f32> = temporary8_;
        let _e773: vec4<f32> = (_e769.xyzz - _e771.xyzz);
        temporary17_.x = _e773.x;
        temporary17_.y = _e773.y;
        temporary17_.z = _e773.z;
        let _e781: vec4<f32> = temporary17_;
        let _e783: vec4<f32> = temporary10_;
        temporary15_.z = dot(_e781.xyzz.xyz, _e783.xyzz.xyz);
        let _e789: vec4<f32> = temporary15_;
        let _e791: vec4<f32> = temporary15_;
        let _e793: vec4<f32> = (_e789.zzzx * _e791.zzzx);
        temporary4_.x = _e793.x;
        temporary4_.w = _e793.w;
        let _e798: vec4<f32> = temporary17_;
        let _e800: vec4<f32> = temporary17_;
        temporary1_.y = dot(_e798.xyzz.xyz, _e800.xyzz.xyz);
        let _e806: vec4<f32> = temporary4_;
        let _e808: vec4<f32> = temporary1_;
        temporary1_.w = (_e806.xxxx - _e808.yyyy).x;
        let _e813: vec4<f32> = temporary1_;
        let _e815: vec4<f32> = temporary4_;
        temporary13_.x = (_e813.wwww + _e815.wwww).x;
        let _e820: vec4<f32> = temporary13_;
        temporary1_.w = _e820.xxxx.x;
        let _e826: vec4<f32> = constant_registers[16u];
        let _e828: vec4<f32> = temporary1_;
        temporary2_.w = f32((_e826.xxxx.x + _e828.wwww.x));
        let _e835: vec4<f32> = temporary2_;
        let _e839: vec4<f32> = constant_registers[16u];
        if all((_e835.wwww != _e839.xxxx)) {
            let _e843: vec4<f32> = temporary1_;
            temporary1_.w = sqrt(_e843.wwww).x;
            let _e848: vec4<f32> = temporary15_;
            temporary1_.y = -(_e848.zzzz).x;
            let _e853: vec4<f32> = temporary1_;
            let _e855: vec4<f32> = temporary1_;
            temporary2_.w = (_e853.yyyy - _e855.wwww).x;
            let _e862: vec4<f32> = constant_registers[16u];
            let _e864: vec4<f32> = temporary2_;
            temporary1_.y = f32((_e862.xxxx.x + _e864.wwww.x));
            let _e871: vec4<f32> = temporary1_;
            let _e875: vec4<f32> = constant_registers[16u];
            if all((_e871.yyyy != _e875.xxxx)) {
                let _e879: vec4<f32> = temporary2_;
                temporary1_.x = _e879.wwww.x;
                let _e883: vec4<f32> = temporary10_;
                let _e885: vec4<f32> = temporary2_;
                let _e887: vec4<f32> = (_e883.xyzz * _e885.wwww);
                temporary13_.x = _e887.x;
                temporary13_.y = _e887.y;
                temporary13_.z = _e887.z;
                let _e894: vec4<f32> = temporary5_;
                let _e896: vec4<f32> = temporary13_;
                let _e898: vec4<f32> = (_e894.xyzz + _e896.xyzz);
                temporary12_.x = _e898.x;
                temporary12_.y = _e898.y;
                temporary12_.z = _e898.z;
                let _e905: vec4<f32> = temporary12_;
                let _e907: vec4<f32> = temporary8_;
                let _e909: vec4<f32> = (_e905.xyzz - _e907.xyzz);
                temporary14_.x = _e909.x;
                temporary14_.y = _e909.y;
                temporary14_.z = _e909.z;
                let _e916: vec4<f32> = temporary14_;
                let _e918: vec4<f32> = normalize(_e916.xyzz);
                temporary16_.x = _e918.x;
                temporary16_.y = _e918.y;
                temporary16_.z = _e918.z;
                let _e925: vec4<f32> = temporary16_;
                let _e926: vec4<f32> = _e925.xyzz;
                temporary20_.x = _e926.x;
                temporary20_.y = _e926.y;
                temporary20_.z = _e926.z;
                let _e933: vec4<f32> = temporary20_;
                let _e934: vec4<f32> = _e933.xyzz;
                temporary18_.x = _e934.x;
                temporary18_.y = _e934.y;
                temporary18_.z = _e934.z;
            }
        }
        let _e941: vec4<f32> = temporary1_;
        temporary4_.y = _e941.xxxx.x;
        let _e945: vec4<f32> = temporary18_;
        let _e946: vec4<f32> = _e945.xyzz;
        temporary3_.x = _e946.x;
        temporary3_.y = _e946.y;
        temporary3_.z = _e946.z;
        let _e953: vec4<f32> = temporary4_;
        let _e955: vec4<f32> = temporary4_;
        temporary1_.x = f32((_e953.yyyy.x + _e955.zzzz.x));
        let _e962: vec4<f32> = temporary1_;
        let _e966: vec4<f32> = constant_registers[16u];
        if all((_e962.xxxx != _e966.xxxx)) {
            let _e970: vec4<f32> = temporary4_;
            temporary4_.z = _e970.yyyy.x;
            let _e974: vec4<f32> = temporary3_;
            let _e975: vec4<f32> = _e974.xyzz;
            temporary6_.x = _e975.x;
            temporary6_.y = _e975.y;
            temporary6_.z = _e975.z;
            let _e984: vec4<f32> = constant_registers[8u];
            let _e985: vec4<f32> = _e984.xyzz;
            temporary7_.x = _e985.x;
            temporary7_.y = _e985.y;
            temporary7_.z = _e985.z;
            let _e994: vec4<f32> = constant_registers[18u];
            temporary1_.z = _e994.xxxx.x;
        }
        let _e998: vec4<f32> = temporary2_;
        let _e999: vec4<f32> = _e998.xyzz;
        temporary5_.x = _e999.x;
        temporary5_.y = _e999.y;
        temporary5_.z = _e999.z;
        let _e1006: vec4<f32> = temporary9_;
        let _e1007: vec4<f32> = _e1006.xyzz;
        temporary10_.x = _e1007.x;
        temporary10_.y = _e1007.y;
        temporary10_.z = _e1007.z;
        let _e1016: vec4<f32> = constant_registers[10u];
        let _e1017: vec4<f32> = _e1016.xyzz;
        temporary8_.x = _e1017.x;
        temporary8_.y = _e1017.y;
        temporary8_.z = _e1017.z;
        let _e1026: vec4<f32> = constant_registers[12u];
        temporary15_.x = _e1026.xxxx.x;
        let _e1030: vec4<f32> = temporary3_;
        let _e1031: vec4<f32> = _e1030.xyzz;
        temporary17_.x = _e1031.x;
        temporary17_.y = _e1031.y;
        temporary17_.z = _e1031.z;
        let _e1040: vec4<f32> = constant_registers[17u];
        temporary15_.y = _e1040.wwww.x;
        let _e1044: vec4<f32> = temporary5_;
        let _e1046: vec4<f32> = temporary8_;
        let _e1048: vec4<f32> = (_e1044.xyzz - _e1046.xyzz);
        temporary18_.x = _e1048.x;
        temporary18_.y = _e1048.y;
        temporary18_.z = _e1048.z;
        let _e1055: vec4<f32> = temporary18_;
        let _e1057: vec4<f32> = temporary10_;
        temporary15_.z = dot(_e1055.xyzz.xyz, _e1057.xyzz.xyz);
        let _e1063: vec4<f32> = temporary15_;
        let _e1065: vec4<f32> = temporary15_;
        let _e1067: vec4<f32> = (_e1063.zzzx * _e1065.zzzx);
        temporary1_.x = _e1067.x;
        temporary1_.w = _e1067.w;
        let _e1072: vec4<f32> = temporary18_;
        let _e1074: vec4<f32> = temporary18_;
        temporary19_.y = dot(_e1072.xyzz.xyz, _e1074.xyzz.xyz);
        let _e1081: vec4<f32> = temporary1_;
        let _e1083: vec4<f32> = temporary19_;
        temporary19_.z = (_e1081.xxxx - _e1083.yyyy).x;
        let _e1088: vec4<f32> = temporary19_;
        let _e1090: vec4<f32> = temporary1_;
        temporary13_.x = (_e1088.zzzz + _e1090.wwww).x;
        let _e1095: vec4<f32> = temporary13_;
        temporary1_.x = _e1095.xxxx.x;
        let _e1101: vec4<f32> = constant_registers[16u];
        let _e1103: vec4<f32> = temporary1_;
        temporary19_.x = f32((_e1101.xxxx.x + _e1103.xxxx.x));
        let _e1110: vec4<f32> = temporary19_;
        let _e1114: vec4<f32> = constant_registers[16u];
        if all((_e1110.xxxx != _e1114.xxxx)) {
            let _e1118: vec4<f32> = temporary1_;
            temporary1_.x = sqrt(_e1118.xxxx).x;
            let _e1123: vec4<f32> = temporary15_;
            temporary19_.y = -(_e1123.zzzz).x;
            let _e1128: vec4<f32> = temporary19_;
            let _e1130: vec4<f32> = temporary1_;
            temporary19_.z = (_e1128.yyyy - _e1130.xxxx).x;
            let _e1135: vec4<f32> = temporary19_;
            temporary19_.x = _e1135.zzzz.x;
            let _e1141: vec4<f32> = constant_registers[16u];
            let _e1143: vec4<f32> = temporary19_;
            temporary19_.y = f32((_e1141.xxxx.x + _e1143.xxxx.x));
            let _e1150: vec4<f32> = temporary19_;
            let _e1154: vec4<f32> = constant_registers[16u];
            if all((_e1150.yyyy != _e1154.xxxx)) {
                let _e1158: vec4<f32> = temporary19_;
                temporary15_.y = _e1158.xxxx.x;
                let _e1162: vec4<f32> = temporary10_;
                let _e1164: vec4<f32> = temporary19_;
                let _e1166: vec4<f32> = (_e1162.xyzz * _e1164.xxxx);
                temporary13_.x = _e1166.x;
                temporary13_.y = _e1166.y;
                temporary13_.z = _e1166.z;
                let _e1173: vec4<f32> = temporary5_;
                let _e1175: vec4<f32> = temporary13_;
                let _e1177: vec4<f32> = (_e1173.xyzz + _e1175.xyzz);
                temporary12_.x = _e1177.x;
                temporary12_.y = _e1177.y;
                temporary12_.z = _e1177.z;
                let _e1184: vec4<f32> = temporary12_;
                let _e1186: vec4<f32> = temporary8_;
                let _e1188: vec4<f32> = (_e1184.xyzz - _e1186.xyzz);
                temporary14_.x = _e1188.x;
                temporary14_.y = _e1188.y;
                temporary14_.z = _e1188.z;
                let _e1195: vec4<f32> = temporary14_;
                let _e1197: vec4<f32> = normalize(_e1195.xyzz);
                temporary16_.x = _e1197.x;
                temporary16_.y = _e1197.y;
                temporary16_.z = _e1197.z;
                let _e1204: vec4<f32> = temporary16_;
                let _e1205: vec4<f32> = _e1204.xyzz;
                temporary20_.x = _e1205.x;
                temporary20_.y = _e1205.y;
                temporary20_.z = _e1205.z;
                let _e1212: vec4<f32> = temporary20_;
                let _e1213: vec4<f32> = _e1212.xyzz;
                temporary17_.x = _e1213.x;
                temporary17_.y = _e1213.y;
                temporary17_.z = _e1213.z;
            }
        }
        let _e1220: vec4<f32> = temporary15_;
        temporary4_.y = _e1220.yyyy.x;
        let _e1224: vec4<f32> = temporary17_;
        let _e1225: vec4<f32> = _e1224.xyzz;
        temporary3_.x = _e1225.x;
        temporary3_.y = _e1225.y;
        temporary3_.z = _e1225.z;
        let _e1232: vec4<f32> = temporary4_;
        let _e1234: vec4<f32> = temporary4_;
        temporary1_.y = f32((_e1232.yyyy.x + _e1234.zzzz.x));
        let _e1241: vec4<f32> = temporary1_;
        let _e1245: vec4<f32> = constant_registers[16u];
        if all((_e1241.yyyy != _e1245.xxxx)) {
            let _e1249: vec4<f32> = temporary4_;
            temporary4_.z = _e1249.yyyy.x;
            let _e1253: vec4<f32> = temporary3_;
            let _e1254: vec4<f32> = _e1253.xyzz;
            temporary6_.x = _e1254.x;
            temporary6_.y = _e1254.y;
            temporary6_.z = _e1254.z;
            let _e1263: vec4<f32> = constant_registers[11u];
            let _e1264: vec4<f32> = _e1263.xyzz;
            temporary7_.x = _e1264.x;
            temporary7_.y = _e1264.y;
            temporary7_.z = _e1264.z;
            let _e1273: vec4<f32> = constant_registers[18u];
            temporary1_.z = _e1273.xxxx.x;
        }
        let _e1277: vec4<f32> = temporary11_;
        let _e1281: vec4<f32> = constant_registers[16u];
        temporary11_.y = (_e1277.yyyy + _e1281.yyyy).x;
        let _e1286: vec4<f32> = temporary1_;
        let _e1290: vec4<f32> = constant_registers[16u];
        temporary1_.y = f32((_e1286.zzzz.x + _e1290.xxxx.x));
        let _e1297: vec4<f32> = temporary1_;
        let _e1301: vec4<f32> = constant_registers[16u];
        if all((_e1297.yyyy != _e1301.xxxx)) {
            let _e1307: vec4<f32> = constant_registers[16u];
            let _e1308: vec4<f32> = _e1307.xyyy;
            temporary11_.x = _e1308.x;
            temporary11_.z = _e1308.z;
        } else {
            let _e1313: vec4<f32> = temporary9_;
            let _e1315: vec4<f32> = temporary4_;
            let _e1317: vec4<f32> = (_e1313.xyzz * _e1315.zzzz);
            temporary5_.x = _e1317.x;
            temporary5_.y = _e1317.y;
            temporary5_.z = _e1317.z;
            let _e1324: vec4<f32> = temporary2_;
            let _e1326: vec4<f32> = temporary5_;
            let _e1328: vec4<f32> = (_e1324.xyzz + _e1326.xyzz);
            temporary2_.x = _e1328.x;
            temporary2_.y = _e1328.y;
            temporary2_.z = _e1328.z;
            let _e1335: vec4<f32> = temporary9_;
            let _e1337: vec4<f32> = temporary6_;
            temporary1_.y = dot(_e1335.xyzz.xyz, _e1337.xyzz.xyz);
            let _e1343: vec4<f32> = temporary1_;
            let _e1347: vec4<f32> = constant_registers[18u];
            temporary5_.x = (_e1343.yyyy * _e1347.xxxx).x;
            let _e1352: vec4<f32> = temporary5_;
            let _e1354: vec4<f32> = temporary6_;
            let _e1356: vec4<f32> = (_e1352.xxxx * _e1354.xyzz);
            temporary10_.x = _e1356.x;
            temporary10_.y = _e1356.y;
            temporary10_.z = _e1356.z;
            let _e1363: vec4<f32> = temporary9_;
            let _e1365: vec4<f32> = temporary10_;
            let _e1367: vec4<f32> = (_e1363.xyzz - _e1365.xyzz);
            temporary9_.x = _e1367.x;
            temporary9_.y = _e1367.y;
            temporary9_.z = _e1367.z;
            let _e1374: vec4<f32> = temporary9_;
            let _e1378: vec4<f32> = constant_registers[18u];
            let _e1380: vec4<f32> = (_e1374.xyzz * _e1378.yyyy);
            temporary5_.x = _e1380.x;
            temporary5_.y = _e1380.y;
            temporary5_.z = _e1380.z;
            let _e1387: vec4<f32> = temporary2_;
            let _e1389: vec4<f32> = temporary5_;
            let _e1391: vec4<f32> = (_e1387.xyzz + _e1389.xyzz);
            temporary2_.x = _e1391.x;
            temporary2_.y = _e1391.y;
            temporary2_.z = _e1391.z;
            let _e1400: vec4<f32> = constant_registers[15u];
            let _e1402: vec4<f32> = temporary2_;
            let _e1404: vec4<f32> = (_e1400.xyzz - _e1402.xyzz);
            temporary5_.x = _e1404.x;
            temporary5_.y = _e1404.y;
            temporary5_.z = _e1404.z;
            let _e1411: vec4<f32> = temporary5_;
            let _e1413: vec4<f32> = normalize(_e1411.xyzz);
            temporary10_.x = _e1413.x;
            temporary10_.y = _e1413.y;
            temporary10_.z = _e1413.z;
            let _e1420: vec4<f32> = temporary5_;
            let _e1422: vec4<f32> = temporary5_;
            temporary8_.x = dot(_e1420.xyzz.xyz, _e1422.xyzz.xyz);
            let _e1428: vec4<f32> = temporary8_;
            temporary1_.y = sqrt(_e1428.xxxx).x;
            let _e1433: vec4<f32> = temporary6_;
            let _e1435: vec4<f32> = temporary10_;
            temporary8_.y = dot(_e1433.xyzz.xyz, _e1435.xyzz.xyz);
            let _e1441: vec4<f32> = temporary8_;
            temporary8_.z = saturate(_e1441.yyyy).x;
            let _e1446: vec4<f32> = temporary1_;
            let _e1448: vec4<f32> = temporary1_;
            temporary2_.w = (_e1446.yyyy * _e1448.yyyy).x;
            let _e1453: vec4<f32> = temporary2_;
            let _e1457: vec4<f32> = constant_registers[18u];
            temporary15_.x = (_e1453.wwww * _e1457.zzzz).x;
            let _e1464: vec4<f32> = constant_registers[18u];
            let _e1466: vec4<f32> = temporary15_;
            temporary15_.y = (_e1464.wwww + _e1466.xxxx).x;
            let _e1471: vec4<f32> = temporary8_;
            let _e1473: vec4<f32> = temporary15_;
            temporary8_.x = (_e1471.zzzz / _e1473.yyyy).x;
            let _e1480: vec4<f32> = constant_registers[6u];
            temporary8_.z = _e1480.xxxx.x;
            let _e1486: vec4<f32> = constant_registers[17u];
            temporary2_.w = _e1486.wwww.x;
            let _e1490: vec4<f32> = temporary2_;
            let _e1494: vec4<f32> = constant_registers[4u];
            let _e1496: vec4<f32> = (_e1490.xyzz - _e1494.xyzz);
            temporary19_.x = _e1496.x;
            temporary19_.y = _e1496.y;
            temporary19_.z = _e1496.z;
            let _e1503: vec4<f32> = temporary19_;
            let _e1505: vec4<f32> = temporary10_;
            temporary13_.x = dot(_e1503.xyzz.xyz, _e1505.xyzz.xyz);
            let _e1511: vec4<f32> = temporary13_;
            let _e1513: vec4<f32> = temporary13_;
            temporary13_.z = (_e1511.xxxx * _e1513.xxxx).x;
            let _e1518: vec4<f32> = temporary19_;
            let _e1520: vec4<f32> = temporary19_;
            temporary3_.w = dot(_e1518.xyzz.xyz, _e1520.xyzz.xyz);
            let _e1526: vec4<f32> = temporary13_;
            let _e1528: vec4<f32> = temporary3_;
            temporary12_.x = (_e1526.zzzz - _e1528.wwww).x;
            let _e1533: vec4<f32> = temporary8_;
            let _e1535: vec4<f32> = temporary8_;
            temporary12_.y = (_e1533.zzzz * _e1535.zzzz).x;
            let _e1540: vec4<f32> = temporary12_;
            let _e1542: vec4<f32> = temporary12_;
            temporary13_.y = (_e1540.xxxx + _e1542.yyyy).x;
            let _e1549: vec4<f32> = constant_registers[16u];
            let _e1551: vec4<f32> = temporary13_;
            temporary13_.z = f32((_e1549.xxxx.x + _e1551.yyyy.x));
            let _e1558: vec4<f32> = temporary13_;
            let _e1562: vec4<f32> = constant_registers[16u];
            if all((_e1558.zzzz != _e1562.xxxx)) {
                let _e1566: vec4<f32> = temporary13_;
                temporary13_.y = sqrt(_e1566.yyyy).x;
                let _e1571: vec4<f32> = temporary13_;
                temporary3_.w = -(_e1571.xxxx).x;
                let _e1576: vec4<f32> = temporary3_;
                let _e1578: vec4<f32> = temporary13_;
                temporary13_.z = (_e1576.wwww - _e1578.yyyy).x;
                let _e1585: vec4<f32> = constant_registers[16u];
                let _e1587: vec4<f32> = temporary13_;
                temporary3_.w = f32((_e1585.xxxx.x + _e1587.zzzz.x));
                let _e1594: vec4<f32> = temporary3_;
                let _e1598: vec4<f32> = constant_registers[16u];
                if all((_e1594.wwww != _e1598.xxxx)) {
                    let _e1602: vec4<f32> = temporary13_;
                    temporary2_.w = _e1602.zzzz.x;
                }
            }
            let _e1606: vec4<f32> = temporary2_;
            let _e1608: vec4<f32> = temporary1_;
            temporary8_.y = f32((_e1606.wwww.x + _e1608.yyyy.x));
            let _e1615: vec4<f32> = temporary8_;
            let _e1619: vec4<f32> = constant_registers[16u];
            if all((_e1615.yyyy != _e1619.xxxx)) {
                let _e1625: vec4<f32> = constant_registers[16u];
                temporary8_.x = _e1625.xxxx.x;
            }
            let _e1631: vec4<f32> = constant_registers[9u];
            temporary8_.z = _e1631.xxxx.x;
            let _e1637: vec4<f32> = constant_registers[17u];
            temporary2_.w = _e1637.wwww.x;
            let _e1641: vec4<f32> = temporary2_;
            let _e1645: vec4<f32> = constant_registers[7u];
            let _e1647: vec4<f32> = (_e1641.xyzz - _e1645.xyzz);
            temporary19_.x = _e1647.x;
            temporary19_.y = _e1647.y;
            temporary19_.z = _e1647.z;
            let _e1654: vec4<f32> = temporary19_;
            let _e1656: vec4<f32> = temporary10_;
            temporary13_.x = dot(_e1654.xyzz.xyz, _e1656.xyzz.xyz);
            let _e1662: vec4<f32> = temporary13_;
            let _e1664: vec4<f32> = temporary13_;
            temporary13_.z = (_e1662.xxxx * _e1664.xxxx).x;
            let _e1669: vec4<f32> = temporary19_;
            let _e1671: vec4<f32> = temporary19_;
            temporary3_.w = dot(_e1669.xyzz.xyz, _e1671.xyzz.xyz);
            let _e1677: vec4<f32> = temporary13_;
            let _e1679: vec4<f32> = temporary3_;
            temporary12_.x = (_e1677.zzzz - _e1679.wwww).x;
            let _e1684: vec4<f32> = temporary8_;
            let _e1686: vec4<f32> = temporary8_;
            temporary12_.y = (_e1684.zzzz * _e1686.zzzz).x;
            let _e1691: vec4<f32> = temporary12_;
            let _e1693: vec4<f32> = temporary12_;
            temporary13_.y = (_e1691.xxxx + _e1693.yyyy).x;
            let _e1700: vec4<f32> = constant_registers[16u];
            let _e1702: vec4<f32> = temporary13_;
            temporary13_.z = f32((_e1700.xxxx.x + _e1702.yyyy.x));
            let _e1709: vec4<f32> = temporary13_;
            let _e1713: vec4<f32> = constant_registers[16u];
            if all((_e1709.zzzz != _e1713.xxxx)) {
                let _e1717: vec4<f32> = temporary13_;
                temporary13_.y = sqrt(_e1717.yyyy).x;
                let _e1722: vec4<f32> = temporary13_;
                temporary3_.w = -(_e1722.xxxx).x;
                let _e1727: vec4<f32> = temporary3_;
                let _e1729: vec4<f32> = temporary13_;
                temporary13_.z = (_e1727.wwww - _e1729.yyyy).x;
                let _e1736: vec4<f32> = constant_registers[16u];
                let _e1738: vec4<f32> = temporary13_;
                temporary3_.w = f32((_e1736.xxxx.x + _e1738.zzzz.x));
                let _e1745: vec4<f32> = temporary3_;
                let _e1749: vec4<f32> = constant_registers[16u];
                if all((_e1745.wwww != _e1749.xxxx)) {
                    let _e1753: vec4<f32> = temporary13_;
                    temporary2_.w = _e1753.zzzz.x;
                }
            }
            let _e1757: vec4<f32> = temporary2_;
            let _e1759: vec4<f32> = temporary1_;
            temporary8_.y = f32((_e1757.wwww.x + _e1759.yyyy.x));
            let _e1766: vec4<f32> = temporary8_;
            let _e1770: vec4<f32> = constant_registers[16u];
            if all((_e1766.yyyy != _e1770.xxxx)) {
                let _e1776: vec4<f32> = constant_registers[16u];
                temporary8_.x = _e1776.xxxx.x;
            }
            let _e1780: vec4<f32> = temporary2_;
            let _e1781: vec4<f32> = _e1780.xyzz;
            temporary15_.x = _e1781.x;
            temporary15_.y = _e1781.y;
            temporary15_.z = _e1781.z;
            let _e1788: vec4<f32> = temporary10_;
            let _e1789: vec4<f32> = _e1788.xyzz;
            temporary17_.x = _e1789.x;
            temporary17_.y = _e1789.y;
            temporary17_.z = _e1789.z;
            let _e1798: vec4<f32> = constant_registers[10u];
            let _e1799: vec4<f32> = _e1798.xyzz;
            temporary18_.x = _e1799.x;
            temporary18_.y = _e1799.y;
            temporary18_.z = _e1799.z;
            let _e1808: vec4<f32> = constant_registers[12u];
            temporary8_.z = _e1808.xxxx.x;
            let _e1814: vec4<f32> = constant_registers[17u];
            temporary2_.w = _e1814.wwww.x;
            let _e1818: vec4<f32> = temporary15_;
            let _e1820: vec4<f32> = temporary18_;
            let _e1822: vec4<f32> = (_e1818.xyzz - _e1820.xyzz);
            temporary19_.x = _e1822.x;
            temporary19_.y = _e1822.y;
            temporary19_.z = _e1822.z;
            let _e1829: vec4<f32> = temporary19_;
            let _e1831: vec4<f32> = temporary17_;
            temporary13_.x = dot(_e1829.xyzz.xyz, _e1831.xyzz.xyz);
            let _e1837: vec4<f32> = temporary13_;
            let _e1839: vec4<f32> = temporary13_;
            temporary13_.z = (_e1837.xxxx * _e1839.xxxx).x;
            let _e1844: vec4<f32> = temporary19_;
            let _e1846: vec4<f32> = temporary19_;
            temporary3_.w = dot(_e1844.xyzz.xyz, _e1846.xyzz.xyz);
            let _e1852: vec4<f32> = temporary13_;
            let _e1854: vec4<f32> = temporary3_;
            temporary12_.x = (_e1852.zzzz - _e1854.wwww).x;
            let _e1859: vec4<f32> = temporary8_;
            let _e1861: vec4<f32> = temporary8_;
            temporary12_.y = (_e1859.zzzz * _e1861.zzzz).x;
            let _e1866: vec4<f32> = temporary12_;
            let _e1868: vec4<f32> = temporary12_;
            temporary12_.z = (_e1866.xxxx + _e1868.yyyy).x;
            let _e1873: vec4<f32> = temporary12_;
            temporary13_.y = _e1873.zzzz.x;
            let _e1879: vec4<f32> = constant_registers[16u];
            let _e1881: vec4<f32> = temporary13_;
            temporary13_.z = f32((_e1879.xxxx.x + _e1881.yyyy.x));
            let _e1888: vec4<f32> = temporary13_;
            let _e1892: vec4<f32> = constant_registers[16u];
            if all((_e1888.zzzz != _e1892.xxxx)) {
                let _e1896: vec4<f32> = temporary13_;
                temporary13_.y = sqrt(_e1896.yyyy).x;
                let _e1901: vec4<f32> = temporary13_;
                temporary3_.w = -(_e1901.xxxx).x;
                let _e1906: vec4<f32> = temporary3_;
                let _e1908: vec4<f32> = temporary13_;
                temporary12_.x = (_e1906.wwww - _e1908.yyyy).x;
                let _e1913: vec4<f32> = temporary12_;
                temporary13_.z = _e1913.xxxx.x;
                let _e1919: vec4<f32> = constant_registers[16u];
                let _e1921: vec4<f32> = temporary13_;
                temporary3_.w = f32((_e1919.xxxx.x + _e1921.zzzz.x));
                let _e1928: vec4<f32> = temporary3_;
                let _e1932: vec4<f32> = constant_registers[16u];
                if all((_e1928.wwww != _e1932.xxxx)) {
                    let _e1936: vec4<f32> = temporary13_;
                    temporary2_.w = _e1936.zzzz.x;
                }
            }
            let _e1940: vec4<f32> = temporary2_;
            temporary4_.y = _e1940.wwww.x;
            let _e1944: vec4<f32> = temporary4_;
            let _e1946: vec4<f32> = temporary1_;
            temporary8_.y = f32((_e1944.yyyy.x + _e1946.yyyy.x));
            let _e1953: vec4<f32> = temporary8_;
            let _e1957: vec4<f32> = constant_registers[16u];
            if all((_e1953.yyyy != _e1957.xxxx)) {
                let _e1963: vec4<f32> = constant_registers[16u];
                temporary8_.x = _e1963.xxxx.x;
            }
            let _e1967: vec4<f32> = temporary6_;
            temporary8_.y = saturate(_e1967.yyyy).x;
            let _e1972: vec4<f32> = temporary8_;
            let _e1976: vec4<f32> = constant_registers[19u];
            temporary8_.z = (_e1972.yyyy * _e1976.xxxx).x;
            let _e1981: vec4<f32> = temporary8_;
            let _e1983: vec4<f32> = temporary8_;
            temporary8_.x = (_e1981.xxxx + _e1983.zzzz).x;
            let _e1988: vec4<f32> = temporary8_;
            let _e1992: vec4<f32> = constant_registers[19u];
            temporary8_.z = (_e1988.xxxx * _e1992.yyyy).x;
            let _e1999: vec4<f32> = constant_registers[19u];
            let _e2001: vec4<f32> = temporary8_;
            temporary2_.w = (_e1999.zzzz + _e2001.zzzz).x;
            let _e2006: vec4<f32> = temporary2_;
            temporary8_.y = _e2006.wwww.x;
            let _e2010: vec4<f32> = temporary1_;
            let _e2014: vec4<f32> = constant_registers[16u];
            temporary8_.z = f32((_e2010.zzzz.x + _e2014.yyyy.x));
            let _e2021: vec4<f32> = temporary8_;
            let _e2025: vec4<f32> = constant_registers[16u];
            if all((_e2021.zzzz != _e2025.xxxx)) {
                let _e2029: vec4<f32> = temporary2_;
                temporary8_.z = fract(_e2029.xxxx).x;
                let _e2034: vec4<f32> = temporary2_;
                let _e2036: vec4<f32> = temporary8_;
                temporary2_.w = (_e2034.xxxx - _e2036.zzzz).x;
                let _e2041: vec4<f32> = temporary2_;
                temporary15_.x = fract(_e2041.zzzz).x;
                let _e2046: vec4<f32> = temporary2_;
                let _e2048: vec4<f32> = temporary15_;
                temporary15_.y = (_e2046.zzzz - _e2048.xxxx).x;
                let _e2053: vec4<f32> = temporary2_;
                let _e2055: vec4<f32> = temporary15_;
                temporary15_.z = (_e2053.wwww + _e2055.yyyy).x;
                let _e2060: vec4<f32> = temporary15_;
                let _e2064: vec4<f32> = constant_registers[18u];
                temporary1_.x = (_e2060.zzzz / _e2064.xxxx).x;
                let _e2069: vec4<f32> = temporary1_;
                temporary17_.x = fract(_e2069.xxxx).x;
                let _e2074: vec4<f32> = temporary17_;
                let _e2078: vec4<f32> = constant_registers[18u];
                temporary17_.y = (_e2074.xxxx * _e2078.xxxx).x;
                let _e2083: vec4<f32> = temporary17_;
                let _e2087: vec4<f32> = constant_registers[16u];
                temporary17_.z = f32((_e2083.yyyy.x + _e2087.yyyy.x));
                let _e2094: vec4<f32> = temporary17_;
                let _e2098: vec4<f32> = constant_registers[16u];
                if all((_e2094.zzzz != _e2098.xxxx)) {
                    let _e2104: vec4<f32> = constant_registers[13u];
                    let _e2106: vec4<f32> = temporary8_;
                    let _e2108: vec4<f32> = (_e2104.xyzz * _e2106.yyyy);
                    temporary15_.x = _e2108.x;
                    temporary15_.y = _e2108.y;
                    temporary15_.z = _e2108.z;
                    let _e2115: vec4<f32> = temporary0_;
                    let _e2117: vec4<f32> = temporary15_;
                    let _e2119: vec4<f32> = (_e2115.xyzz + _e2117.xyzz);
                    temporary0_.x = _e2119.x;
                    temporary0_.y = _e2119.y;
                    temporary0_.z = _e2119.z;
                } else {
                    let _e2128: vec4<f32> = constant_registers[14u];
                    let _e2130: vec4<f32> = temporary8_;
                    let _e2132: vec4<f32> = (_e2128.xyzz * _e2130.yyyy);
                    temporary15_.x = _e2132.x;
                    temporary15_.y = _e2132.y;
                    temporary15_.z = _e2132.z;
                    let _e2139: vec4<f32> = temporary0_;
                    let _e2141: vec4<f32> = temporary15_;
                    let _e2143: vec4<f32> = (_e2139.xyzz + _e2141.xyzz);
                    temporary0_.x = _e2143.x;
                    temporary0_.y = _e2143.y;
                    temporary0_.z = _e2143.z;
                }
            }
            let _e2150: vec4<f32> = temporary1_;
            let _e2154: vec4<f32> = constant_registers[18u];
            temporary8_.z = f32((_e2150.zzzz.x + _e2154.xxxx.x));
            let _e2161: vec4<f32> = temporary8_;
            let _e2165: vec4<f32> = constant_registers[16u];
            if all((_e2161.zzzz != _e2165.xxxx)) {
                let _e2169: vec4<f32> = temporary7_;
                let _e2171: vec4<f32> = temporary8_;
                let _e2173: vec4<f32> = (_e2169.xyzz * _e2171.yyyy);
                temporary15_.x = _e2173.x;
                temporary15_.y = _e2173.y;
                temporary15_.z = _e2173.z;
                let _e2180: vec4<f32> = temporary0_;
                let _e2182: vec4<f32> = temporary15_;
                let _e2184: vec4<f32> = (_e2180.xyzz + _e2182.xyzz);
                temporary0_.x = _e2184.x;
                temporary0_.y = _e2184.y;
                temporary0_.z = _e2184.z;
            }
            let _e2193: vec4<f32> = constant_registers[16u];
            temporary11_.x = _e2193.yyyy.x;
        }
    }
    let _e2197: vec4<f32> = temporary11_;
    let _e2201: vec4<f32> = constant_registers[16u];
    if all((_e2197.xxxx != _e2201.xxxx)) {
        let _e2207: vec4<f32> = constant_registers[16u];
        temporary1_.z = _e2207.xxxx.x;
        let _e2213: vec4<f32> = constant_registers[17u];
        temporary4_.z = _e2213.wwww.x;
        let _e2219: vec4<f32> = constant_registers[16u];
        let _e2220: vec4<f32> = _e2219.xyxx;
        temporary3_.x = _e2220.x;
        temporary3_.y = _e2220.y;
        temporary3_.z = _e2220.z;
        let _e2227: vec4<f32> = temporary3_;
        let _e2228: vec4<f32> = _e2227.xyzz;
        temporary12_.x = _e2228.x;
        temporary12_.y = _e2228.y;
        temporary12_.z = _e2228.z;
        let _e2237: vec4<f32> = constant_registers[17u];
        temporary2_.w = _e2237.wwww.x;
        let _e2241: vec4<f32> = temporary2_;
        let _e2245: vec4<f32> = constant_registers[16u];
        let _e2247: vec4<f32> = (_e2241.xyzz - _e2245.xxxx);
        temporary20_.x = _e2247.x;
        temporary20_.y = _e2247.y;
        temporary20_.z = _e2247.z;
        let _e2254: vec4<f32> = temporary20_;
        let _e2256: vec4<f32> = temporary12_;
        temporary14_.y = dot(_e2254.xyzz.xyz, _e2256.xyzz.xyz);
        let _e2262: vec4<f32> = temporary14_;
        temporary14_.z = -(_e2262.yyyy).x;
        let _e2267: vec4<f32> = temporary9_;
        let _e2269: vec4<f32> = temporary12_;
        temporary4_.x = dot(_e2267.xyzz.xyz, _e2269.xyzz.xyz);
        let _e2275: vec4<f32> = temporary14_;
        let _e2277: vec4<f32> = temporary4_;
        temporary16_.x = (_e2275.zzzz / _e2277.xxxx).x;
        let _e2282: vec4<f32> = temporary16_;
        temporary14_.x = _e2282.xxxx.x;
        let _e2288: vec4<f32> = constant_registers[16u];
        let _e2290: vec4<f32> = temporary14_;
        temporary14_.y = f32((_e2288.xxxx.x + _e2290.xxxx.x));
        let _e2297: vec4<f32> = temporary14_;
        let _e2301: vec4<f32> = constant_registers[16u];
        if all((_e2297.yyyy != _e2301.xxxx)) {
            let _e2305: vec4<f32> = temporary14_;
            temporary2_.w = _e2305.xxxx.x;
        }
        let _e2309: vec4<f32> = temporary2_;
        temporary4_.y = _e2309.wwww.x;
        let _e2313: vec4<f32> = temporary4_;
        let _e2315: vec4<f32> = temporary4_;
        temporary8_.z = f32((_e2313.yyyy.x + _e2315.zzzz.x));
        let _e2322: vec4<f32> = temporary8_;
        let _e2326: vec4<f32> = constant_registers[16u];
        if all((_e2322.zzzz != _e2326.xxxx)) {
            let _e2330: vec4<f32> = temporary4_;
            temporary4_.z = _e2330.yyyy.x;
            let _e2334: vec4<f32> = temporary3_;
            let _e2335: vec4<f32> = _e2334.xyzz;
            temporary6_.x = _e2335.x;
            temporary6_.y = _e2335.y;
            temporary6_.z = _e2335.z;
            let _e2344: vec4<f32> = constant_registers[16u];
            temporary1_.z = _e2344.yyyy.x;
        }
        let _e2348: vec4<f32> = temporary2_;
        let _e2349: vec4<f32> = _e2348.xyzz;
        temporary15_.x = _e2349.x;
        temporary15_.y = _e2349.y;
        temporary15_.z = _e2349.z;
        let _e2356: vec4<f32> = temporary9_;
        let _e2357: vec4<f32> = _e2356.xyzz;
        temporary17_.x = _e2357.x;
        temporary17_.y = _e2357.y;
        temporary17_.z = _e2357.z;
        let _e2366: vec4<f32> = constant_registers[4u];
        let _e2367: vec4<f32> = _e2366.xyzz;
        temporary18_.x = _e2367.x;
        temporary18_.y = _e2367.y;
        temporary18_.z = _e2367.z;
        let _e2376: vec4<f32> = constant_registers[6u];
        temporary2_.w = _e2376.xxxx.x;
        let _e2380: vec4<f32> = temporary3_;
        let _e2381: vec4<f32> = _e2380.xyzz;
        temporary19_.x = _e2381.x;
        temporary19_.y = _e2381.y;
        temporary19_.z = _e2381.z;
        let _e2390: vec4<f32> = constant_registers[17u];
        temporary13_.x = _e2390.wwww.x;
        let _e2394: vec4<f32> = temporary15_;
        let _e2396: vec4<f32> = temporary18_;
        let _e2398: vec4<f32> = (_e2394.xyzz - _e2396.xyzz);
        temporary12_.x = _e2398.x;
        temporary12_.y = _e2398.y;
        temporary12_.z = _e2398.z;
        let _e2405: vec4<f32> = temporary12_;
        let _e2407: vec4<f32> = temporary17_;
        temporary13_.y = dot(_e2405.xyzz.xyz, _e2407.xyzz.xyz);
        let _e2413: vec4<f32> = temporary13_;
        let _e2415: vec4<f32> = temporary13_;
        temporary3_.w = (_e2413.yyyy * _e2415.yyyy).x;
        let _e2420: vec4<f32> = temporary12_;
        let _e2422: vec4<f32> = temporary12_;
        temporary14_.x = dot(_e2420.xyzz.xyz, _e2422.xyzz.xyz);
        let _e2428: vec4<f32> = temporary3_;
        let _e2430: vec4<f32> = temporary14_;
        temporary14_.y = (_e2428.wwww - _e2430.xxxx).x;
        let _e2435: vec4<f32> = temporary2_;
        let _e2437: vec4<f32> = temporary2_;
        temporary14_.z = (_e2435.wwww * _e2437.wwww).x;
        let _e2442: vec4<f32> = temporary14_;
        let _e2444: vec4<f32> = temporary14_;
        temporary13_.z = (_e2442.yyyy + _e2444.zzzz).x;
        let _e2451: vec4<f32> = constant_registers[16u];
        let _e2453: vec4<f32> = temporary13_;
        temporary3_.w = f32((_e2451.xxxx.x + _e2453.zzzz.x));
        let _e2460: vec4<f32> = temporary3_;
        let _e2464: vec4<f32> = constant_registers[16u];
        if all((_e2460.wwww != _e2464.xxxx)) {
            let _e2468: vec4<f32> = temporary13_;
            temporary13_.z = sqrt(_e2468.zzzz).x;
            let _e2473: vec4<f32> = temporary13_;
            temporary14_.x = -(_e2473.yyyy).x;
            let _e2478: vec4<f32> = temporary14_;
            let _e2480: vec4<f32> = temporary13_;
            temporary14_.y = (_e2478.xxxx - _e2480.zzzz).x;
            let _e2485: vec4<f32> = temporary14_;
            temporary3_.w = _e2485.yyyy.x;
            let _e2491: vec4<f32> = constant_registers[16u];
            let _e2493: vec4<f32> = temporary3_;
            temporary14_.x = f32((_e2491.xxxx.x + _e2493.wwww.x));
            let _e2500: vec4<f32> = temporary14_;
            let _e2504: vec4<f32> = constant_registers[16u];
            if all((_e2500.xxxx != _e2504.xxxx)) {
                let _e2508: vec4<f32> = temporary3_;
                temporary13_.x = _e2508.wwww.x;
                let _e2512: vec4<f32> = temporary17_;
                let _e2514: vec4<f32> = temporary3_;
                let _e2516: vec4<f32> = (_e2512.xyzz * _e2514.wwww);
                temporary14_.x = _e2516.x;
                temporary14_.y = _e2516.y;
                temporary14_.z = _e2516.z;
                let _e2523: vec4<f32> = temporary15_;
                let _e2525: vec4<f32> = temporary14_;
                let _e2527: vec4<f32> = (_e2523.xyzz + _e2525.xyzz);
                temporary20_.x = _e2527.x;
                temporary20_.y = _e2527.y;
                temporary20_.z = _e2527.z;
                let _e2534: vec4<f32> = temporary20_;
                let _e2536: vec4<f32> = temporary18_;
                let _e2538: vec4<f32> = (_e2534.xyzz - _e2536.xyzz);
                temporary16_.x = _e2538.x;
                temporary16_.y = _e2538.y;
                temporary16_.z = _e2538.z;
                let _e2545: vec4<f32> = temporary16_;
                let _e2547: vec4<f32> = normalize(_e2545.xyzz);
                temporary19_.x = _e2547.x;
                temporary19_.y = _e2547.y;
                temporary19_.z = _e2547.z;
            }
        }
        let _e2554: vec4<f32> = temporary13_;
        temporary4_.y = _e2554.xxxx.x;
        let _e2558: vec4<f32> = temporary19_;
        let _e2559: vec4<f32> = _e2558.xyzz;
        temporary3_.x = _e2559.x;
        temporary3_.y = _e2559.y;
        temporary3_.z = _e2559.z;
        let _e2566: vec4<f32> = temporary4_;
        let _e2568: vec4<f32> = temporary4_;
        temporary8_.z = f32((_e2566.yyyy.x + _e2568.zzzz.x));
        let _e2575: vec4<f32> = temporary8_;
        let _e2579: vec4<f32> = constant_registers[16u];
        if all((_e2575.zzzz != _e2579.xxxx)) {
            let _e2583: vec4<f32> = temporary4_;
            temporary4_.z = _e2583.yyyy.x;
            let _e2587: vec4<f32> = temporary3_;
            let _e2588: vec4<f32> = _e2587.xyzz;
            temporary6_.x = _e2588.x;
            temporary6_.y = _e2588.y;
            temporary6_.z = _e2588.z;
            let _e2597: vec4<f32> = constant_registers[5u];
            let _e2598: vec4<f32> = _e2597.xyzz;
            temporary7_.x = _e2598.x;
            temporary7_.y = _e2598.y;
            temporary7_.z = _e2598.z;
            let _e2607: vec4<f32> = constant_registers[18u];
            temporary1_.z = _e2607.xxxx.x;
        }
        let _e2611: vec4<f32> = temporary2_;
        let _e2612: vec4<f32> = _e2611.xyzz;
        temporary15_.x = _e2612.x;
        temporary15_.y = _e2612.y;
        temporary15_.z = _e2612.z;
        let _e2619: vec4<f32> = temporary9_;
        let _e2620: vec4<f32> = _e2619.xyzz;
        temporary17_.x = _e2620.x;
        temporary17_.y = _e2620.y;
        temporary17_.z = _e2620.z;
        let _e2629: vec4<f32> = constant_registers[7u];
        let _e2630: vec4<f32> = _e2629.xyzz;
        temporary18_.x = _e2630.x;
        temporary18_.y = _e2630.y;
        temporary18_.z = _e2630.z;
        let _e2639: vec4<f32> = constant_registers[9u];
        temporary2_.w = _e2639.xxxx.x;
        let _e2643: vec4<f32> = temporary3_;
        let _e2644: vec4<f32> = _e2643.xyzz;
        temporary19_.x = _e2644.x;
        temporary19_.y = _e2644.y;
        temporary19_.z = _e2644.z;
        let _e2653: vec4<f32> = constant_registers[17u];
        temporary13_.x = _e2653.wwww.x;
        let _e2657: vec4<f32> = temporary15_;
        let _e2659: vec4<f32> = temporary18_;
        let _e2661: vec4<f32> = (_e2657.xyzz - _e2659.xyzz);
        temporary12_.x = _e2661.x;
        temporary12_.y = _e2661.y;
        temporary12_.z = _e2661.z;
        let _e2668: vec4<f32> = temporary12_;
        let _e2670: vec4<f32> = temporary17_;
        temporary13_.y = dot(_e2668.xyzz.xyz, _e2670.xyzz.xyz);
        let _e2676: vec4<f32> = temporary13_;
        let _e2678: vec4<f32> = temporary13_;
        temporary3_.w = (_e2676.yyyy * _e2678.yyyy).x;
        let _e2683: vec4<f32> = temporary12_;
        let _e2685: vec4<f32> = temporary12_;
        temporary14_.x = dot(_e2683.xyzz.xyz, _e2685.xyzz.xyz);
        let _e2691: vec4<f32> = temporary3_;
        let _e2693: vec4<f32> = temporary14_;
        temporary14_.y = (_e2691.wwww - _e2693.xxxx).x;
        let _e2698: vec4<f32> = temporary2_;
        let _e2700: vec4<f32> = temporary2_;
        temporary14_.z = (_e2698.wwww * _e2700.wwww).x;
        let _e2705: vec4<f32> = temporary14_;
        let _e2707: vec4<f32> = temporary14_;
        temporary13_.z = (_e2705.yyyy + _e2707.zzzz).x;
        let _e2714: vec4<f32> = constant_registers[16u];
        let _e2716: vec4<f32> = temporary13_;
        temporary3_.w = f32((_e2714.xxxx.x + _e2716.zzzz.x));
        let _e2723: vec4<f32> = temporary3_;
        let _e2727: vec4<f32> = constant_registers[16u];
        if all((_e2723.wwww != _e2727.xxxx)) {
            let _e2731: vec4<f32> = temporary13_;
            temporary13_.z = sqrt(_e2731.zzzz).x;
            let _e2736: vec4<f32> = temporary13_;
            temporary14_.x = -(_e2736.yyyy).x;
            let _e2741: vec4<f32> = temporary14_;
            let _e2743: vec4<f32> = temporary13_;
            temporary14_.y = (_e2741.xxxx - _e2743.zzzz).x;
            let _e2748: vec4<f32> = temporary14_;
            temporary3_.w = _e2748.yyyy.x;
            let _e2754: vec4<f32> = constant_registers[16u];
            let _e2756: vec4<f32> = temporary3_;
            temporary14_.x = f32((_e2754.xxxx.x + _e2756.wwww.x));
            let _e2763: vec4<f32> = temporary14_;
            let _e2767: vec4<f32> = constant_registers[16u];
            if all((_e2763.xxxx != _e2767.xxxx)) {
                let _e2771: vec4<f32> = temporary3_;
                temporary13_.x = _e2771.wwww.x;
                let _e2775: vec4<f32> = temporary17_;
                let _e2777: vec4<f32> = temporary3_;
                let _e2779: vec4<f32> = (_e2775.xyzz * _e2777.wwww);
                temporary14_.x = _e2779.x;
                temporary14_.y = _e2779.y;
                temporary14_.z = _e2779.z;
                let _e2786: vec4<f32> = temporary15_;
                let _e2788: vec4<f32> = temporary14_;
                let _e2790: vec4<f32> = (_e2786.xyzz + _e2788.xyzz);
                temporary20_.x = _e2790.x;
                temporary20_.y = _e2790.y;
                temporary20_.z = _e2790.z;
                let _e2797: vec4<f32> = temporary20_;
                let _e2799: vec4<f32> = temporary18_;
                let _e2801: vec4<f32> = (_e2797.xyzz - _e2799.xyzz);
                temporary16_.x = _e2801.x;
                temporary16_.y = _e2801.y;
                temporary16_.z = _e2801.z;
                let _e2808: vec4<f32> = temporary16_;
                let _e2810: vec4<f32> = normalize(_e2808.xyzz);
                temporary19_.x = _e2810.x;
                temporary19_.y = _e2810.y;
                temporary19_.z = _e2810.z;
            }
        }
        let _e2817: vec4<f32> = temporary13_;
        temporary4_.y = _e2817.xxxx.x;
        let _e2821: vec4<f32> = temporary19_;
        let _e2822: vec4<f32> = _e2821.xyzz;
        temporary3_.x = _e2822.x;
        temporary3_.y = _e2822.y;
        temporary3_.z = _e2822.z;
        let _e2829: vec4<f32> = temporary4_;
        let _e2831: vec4<f32> = temporary4_;
        temporary8_.z = f32((_e2829.yyyy.x + _e2831.zzzz.x));
        let _e2838: vec4<f32> = temporary8_;
        let _e2842: vec4<f32> = constant_registers[16u];
        if all((_e2838.zzzz != _e2842.xxxx)) {
            let _e2846: vec4<f32> = temporary4_;
            temporary4_.z = _e2846.yyyy.x;
            let _e2850: vec4<f32> = temporary3_;
            let _e2851: vec4<f32> = _e2850.xyzz;
            temporary6_.x = _e2851.x;
            temporary6_.y = _e2851.y;
            temporary6_.z = _e2851.z;
            let _e2860: vec4<f32> = constant_registers[8u];
            let _e2861: vec4<f32> = _e2860.xyzz;
            temporary7_.x = _e2861.x;
            temporary7_.y = _e2861.y;
            temporary7_.z = _e2861.z;
            let _e2870: vec4<f32> = constant_registers[18u];
            temporary1_.z = _e2870.xxxx.x;
        }
        let _e2874: vec4<f32> = temporary2_;
        let _e2875: vec4<f32> = _e2874.xyzz;
        temporary15_.x = _e2875.x;
        temporary15_.y = _e2875.y;
        temporary15_.z = _e2875.z;
        let _e2882: vec4<f32> = temporary9_;
        let _e2883: vec4<f32> = _e2882.xyzz;
        temporary17_.x = _e2883.x;
        temporary17_.y = _e2883.y;
        temporary17_.z = _e2883.z;
        let _e2892: vec4<f32> = constant_registers[10u];
        let _e2893: vec4<f32> = _e2892.xyzz;
        temporary18_.x = _e2893.x;
        temporary18_.y = _e2893.y;
        temporary18_.z = _e2893.z;
        let _e2902: vec4<f32> = constant_registers[12u];
        temporary2_.w = _e2902.xxxx.x;
        let _e2906: vec4<f32> = temporary3_;
        let _e2907: vec4<f32> = _e2906.xyzz;
        temporary19_.x = _e2907.x;
        temporary19_.y = _e2907.y;
        temporary19_.z = _e2907.z;
        let _e2916: vec4<f32> = constant_registers[17u];
        temporary13_.x = _e2916.wwww.x;
        let _e2920: vec4<f32> = temporary15_;
        let _e2922: vec4<f32> = temporary18_;
        let _e2924: vec4<f32> = (_e2920.xyzz - _e2922.xyzz);
        temporary12_.x = _e2924.x;
        temporary12_.y = _e2924.y;
        temporary12_.z = _e2924.z;
        let _e2931: vec4<f32> = temporary12_;
        let _e2933: vec4<f32> = temporary17_;
        temporary13_.y = dot(_e2931.xyzz.xyz, _e2933.xyzz.xyz);
        let _e2939: vec4<f32> = temporary13_;
        let _e2941: vec4<f32> = temporary13_;
        temporary3_.w = (_e2939.yyyy * _e2941.yyyy).x;
        let _e2946: vec4<f32> = temporary12_;
        let _e2948: vec4<f32> = temporary12_;
        temporary14_.x = dot(_e2946.xyzz.xyz, _e2948.xyzz.xyz);
        let _e2954: vec4<f32> = temporary3_;
        let _e2956: vec4<f32> = temporary14_;
        temporary14_.y = (_e2954.wwww - _e2956.xxxx).x;
        let _e2961: vec4<f32> = temporary2_;
        let _e2963: vec4<f32> = temporary2_;
        temporary14_.z = (_e2961.wwww * _e2963.wwww).x;
        let _e2968: vec4<f32> = temporary14_;
        let _e2970: vec4<f32> = temporary14_;
        temporary4_.x = (_e2968.yyyy + _e2970.zzzz).x;
        let _e2975: vec4<f32> = temporary4_;
        temporary13_.z = _e2975.xxxx.x;
        let _e2981: vec4<f32> = constant_registers[16u];
        let _e2983: vec4<f32> = temporary13_;
        temporary3_.w = f32((_e2981.xxxx.x + _e2983.zzzz.x));
        let _e2990: vec4<f32> = temporary3_;
        let _e2994: vec4<f32> = constant_registers[16u];
        if all((_e2990.wwww != _e2994.xxxx)) {
            let _e2998: vec4<f32> = temporary13_;
            temporary13_.z = sqrt(_e2998.zzzz).x;
            let _e3003: vec4<f32> = temporary13_;
            temporary14_.x = -(_e3003.yyyy).x;
            let _e3008: vec4<f32> = temporary14_;
            let _e3010: vec4<f32> = temporary13_;
            temporary14_.y = (_e3008.xxxx - _e3010.zzzz).x;
            let _e3015: vec4<f32> = temporary14_;
            temporary3_.w = _e3015.yyyy.x;
            let _e3021: vec4<f32> = constant_registers[16u];
            let _e3023: vec4<f32> = temporary3_;
            temporary14_.x = f32((_e3021.xxxx.x + _e3023.wwww.x));
            let _e3030: vec4<f32> = temporary14_;
            let _e3034: vec4<f32> = constant_registers[16u];
            if all((_e3030.xxxx != _e3034.xxxx)) {
                let _e3038: vec4<f32> = temporary3_;
                temporary13_.x = _e3038.wwww.x;
                let _e3042: vec4<f32> = temporary17_;
                let _e3044: vec4<f32> = temporary3_;
                let _e3046: vec4<f32> = (_e3042.xyzz * _e3044.wwww);
                temporary14_.x = _e3046.x;
                temporary14_.y = _e3046.y;
                temporary14_.z = _e3046.z;
                let _e3053: vec4<f32> = temporary15_;
                let _e3055: vec4<f32> = temporary14_;
                let _e3057: vec4<f32> = (_e3053.xyzz + _e3055.xyzz);
                temporary20_.x = _e3057.x;
                temporary20_.y = _e3057.y;
                temporary20_.z = _e3057.z;
                let _e3064: vec4<f32> = temporary20_;
                let _e3066: vec4<f32> = temporary18_;
                let _e3068: vec4<f32> = (_e3064.xyzz - _e3066.xyzz);
                temporary16_.x = _e3068.x;
                temporary16_.y = _e3068.y;
                temporary16_.z = _e3068.z;
                let _e3075: vec4<f32> = temporary16_;
                let _e3077: vec4<f32> = normalize(_e3075.xyzz);
                temporary19_.x = _e3077.x;
                temporary19_.y = _e3077.y;
                temporary19_.z = _e3077.z;
            }
        }
        let _e3084: vec4<f32> = temporary13_;
        temporary4_.y = _e3084.xxxx.x;
        let _e3088: vec4<f32> = temporary19_;
        let _e3089: vec4<f32> = _e3088.xyzz;
        temporary3_.x = _e3089.x;
        temporary3_.y = _e3089.y;
        temporary3_.z = _e3089.z;
        let _e3096: vec4<f32> = temporary4_;
        let _e3098: vec4<f32> = temporary4_;
        temporary8_.z = f32((_e3096.yyyy.x + _e3098.zzzz.x));
        let _e3105: vec4<f32> = temporary8_;
        let _e3109: vec4<f32> = constant_registers[16u];
        if all((_e3105.zzzz != _e3109.xxxx)) {
            let _e3113: vec4<f32> = temporary4_;
            temporary4_.z = _e3113.yyyy.x;
            let _e3117: vec4<f32> = temporary3_;
            let _e3118: vec4<f32> = _e3117.xyzz;
            temporary6_.x = _e3118.x;
            temporary6_.y = _e3118.y;
            temporary6_.z = _e3118.z;
            let _e3127: vec4<f32> = constant_registers[11u];
            let _e3128: vec4<f32> = _e3127.xyzz;
            temporary7_.x = _e3128.x;
            temporary7_.y = _e3128.y;
            temporary7_.z = _e3128.z;
            let _e3137: vec4<f32> = constant_registers[18u];
            temporary1_.z = _e3137.xxxx.x;
        }
        let _e3141: vec4<f32> = temporary11_;
        let _e3145: vec4<f32> = constant_registers[16u];
        temporary11_.y = (_e3141.yyyy + _e3145.yyyy).x;
        let _e3150: vec4<f32> = temporary1_;
        let _e3154: vec4<f32> = constant_registers[16u];
        temporary8_.z = f32((_e3150.zzzz.x + _e3154.xxxx.x));
        let _e3161: vec4<f32> = temporary8_;
        let _e3165: vec4<f32> = constant_registers[16u];
        if all((_e3161.zzzz != _e3165.xxxx)) {
            let _e3171: vec4<f32> = constant_registers[16u];
            let _e3172: vec4<f32> = _e3171.xyyy;
            temporary11_.x = _e3172.x;
            temporary11_.z = _e3172.z;
        } else {
            let _e3177: vec4<f32> = temporary9_;
            let _e3179: vec4<f32> = temporary4_;
            let _e3181: vec4<f32> = (_e3177.xyzz * _e3179.zzzz);
            temporary15_.x = _e3181.x;
            temporary15_.y = _e3181.y;
            temporary15_.z = _e3181.z;
            let _e3188: vec4<f32> = temporary2_;
            let _e3190: vec4<f32> = temporary15_;
            let _e3192: vec4<f32> = (_e3188.xyzz + _e3190.xyzz);
            temporary2_.x = _e3192.x;
            temporary2_.y = _e3192.y;
            temporary2_.z = _e3192.z;
            let _e3199: vec4<f32> = temporary9_;
            let _e3201: vec4<f32> = temporary6_;
            temporary8_.z = dot(_e3199.xyzz.xyz, _e3201.xyzz.xyz);
            let _e3207: vec4<f32> = temporary8_;
            let _e3211: vec4<f32> = constant_registers[18u];
            temporary2_.w = (_e3207.zzzz * _e3211.xxxx).x;
            let _e3216: vec4<f32> = temporary2_;
            let _e3218: vec4<f32> = temporary6_;
            let _e3220: vec4<f32> = (_e3216.wwww * _e3218.xyzz);
            temporary15_.x = _e3220.x;
            temporary15_.y = _e3220.y;
            temporary15_.z = _e3220.z;
            let _e3227: vec4<f32> = temporary9_;
            let _e3229: vec4<f32> = temporary15_;
            let _e3231: vec4<f32> = (_e3227.xyzz - _e3229.xyzz);
            temporary9_.x = _e3231.x;
            temporary9_.y = _e3231.y;
            temporary9_.z = _e3231.z;
            let _e3238: vec4<f32> = temporary9_;
            let _e3242: vec4<f32> = constant_registers[18u];
            let _e3244: vec4<f32> = (_e3238.xyzz * _e3242.yyyy);
            temporary15_.x = _e3244.x;
            temporary15_.y = _e3244.y;
            temporary15_.z = _e3244.z;
            let _e3251: vec4<f32> = temporary2_;
            let _e3253: vec4<f32> = temporary15_;
            let _e3255: vec4<f32> = (_e3251.xyzz + _e3253.xyzz);
            temporary2_.x = _e3255.x;
            temporary2_.y = _e3255.y;
            temporary2_.z = _e3255.z;
            let _e3264: vec4<f32> = constant_registers[15u];
            let _e3266: vec4<f32> = temporary2_;
            let _e3268: vec4<f32> = (_e3264.xyzz - _e3266.xyzz);
            temporary5_.x = _e3268.x;
            temporary5_.y = _e3268.y;
            temporary5_.z = _e3268.z;
            let _e3275: vec4<f32> = temporary5_;
            let _e3277: vec4<f32> = normalize(_e3275.xyzz);
            temporary10_.x = _e3277.x;
            temporary10_.y = _e3277.y;
            temporary10_.z = _e3277.z;
            let _e3284: vec4<f32> = temporary5_;
            let _e3286: vec4<f32> = temporary5_;
            temporary8_.z = dot(_e3284.xyzz.xyz, _e3286.xyzz.xyz);
            let _e3292: vec4<f32> = temporary8_;
            temporary1_.y = sqrt(_e3292.zzzz).x;
            let _e3297: vec4<f32> = temporary6_;
            let _e3299: vec4<f32> = temporary10_;
            temporary8_.z = dot(_e3297.xyzz.xyz, _e3299.xyzz.xyz);
            let _e3305: vec4<f32> = temporary8_;
            temporary2_.w = saturate(_e3305.zzzz).x;
            let _e3310: vec4<f32> = temporary1_;
            let _e3312: vec4<f32> = temporary1_;
            temporary15_.x = (_e3310.yyyy * _e3312.yyyy).x;
            let _e3317: vec4<f32> = temporary15_;
            let _e3321: vec4<f32> = constant_registers[18u];
            temporary15_.y = (_e3317.xxxx * _e3321.zzzz).x;
            let _e3328: vec4<f32> = constant_registers[18u];
            let _e3330: vec4<f32> = temporary15_;
            temporary15_.z = (_e3328.wwww + _e3330.yyyy).x;
            let _e3335: vec4<f32> = temporary2_;
            let _e3337: vec4<f32> = temporary15_;
            temporary1_.x = (_e3335.wwww / _e3337.zzzz).x;
            let _e3342: vec4<f32> = temporary1_;
            temporary8_.x = _e3342.xxxx.x;
            let _e3348: vec4<f32> = constant_registers[6u];
            temporary2_.w = _e3348.xxxx.x;
            let _e3354: vec4<f32> = constant_registers[17u];
            temporary19_.x = _e3354.wwww.x;
            let _e3358: vec4<f32> = temporary2_;
            let _e3362: vec4<f32> = constant_registers[4u];
            let _e3364: vec4<f32> = (_e3358.xyzz - _e3362.xyzz);
            temporary13_.x = _e3364.x;
            temporary13_.y = _e3364.y;
            temporary13_.z = _e3364.z;
            let _e3371: vec4<f32> = temporary13_;
            let _e3373: vec4<f32> = temporary10_;
            temporary19_.y = dot(_e3371.xyzz.xyz, _e3373.xyzz.xyz);
            let _e3379: vec4<f32> = temporary19_;
            let _e3381: vec4<f32> = temporary19_;
            temporary1_.w = (_e3379.yyyy * _e3381.yyyy).x;
            let _e3386: vec4<f32> = temporary13_;
            let _e3388: vec4<f32> = temporary13_;
            temporary12_.x = dot(_e3386.xyzz.xyz, _e3388.xyzz.xyz);
            let _e3394: vec4<f32> = temporary1_;
            let _e3396: vec4<f32> = temporary12_;
            temporary12_.y = (_e3394.wwww - _e3396.xxxx).x;
            let _e3401: vec4<f32> = temporary2_;
            let _e3403: vec4<f32> = temporary2_;
            temporary12_.z = (_e3401.wwww * _e3403.wwww).x;
            let _e3408: vec4<f32> = temporary12_;
            let _e3410: vec4<f32> = temporary12_;
            temporary19_.z = (_e3408.yyyy + _e3410.zzzz).x;
            let _e3417: vec4<f32> = constant_registers[16u];
            let _e3419: vec4<f32> = temporary19_;
            temporary1_.w = f32((_e3417.xxxx.x + _e3419.zzzz.x));
            let _e3426: vec4<f32> = temporary1_;
            let _e3430: vec4<f32> = constant_registers[16u];
            if all((_e3426.wwww != _e3430.xxxx)) {
                let _e3434: vec4<f32> = temporary19_;
                temporary19_.z = sqrt(_e3434.zzzz).x;
                let _e3439: vec4<f32> = temporary19_;
                temporary12_.x = -(_e3439.yyyy).x;
                let _e3444: vec4<f32> = temporary12_;
                let _e3446: vec4<f32> = temporary19_;
                temporary1_.w = (_e3444.xxxx - _e3446.zzzz).x;
                let _e3453: vec4<f32> = constant_registers[16u];
                let _e3455: vec4<f32> = temporary1_;
                temporary12_.x = f32((_e3453.xxxx.x + _e3455.wwww.x));
                let _e3462: vec4<f32> = temporary12_;
                let _e3466: vec4<f32> = constant_registers[16u];
                if all((_e3462.xxxx != _e3466.xxxx)) {
                    let _e3470: vec4<f32> = temporary1_;
                    temporary19_.x = _e3470.wwww.x;
                }
            }
            let _e3474: vec4<f32> = temporary19_;
            let _e3476: vec4<f32> = temporary1_;
            temporary8_.z = f32((_e3474.xxxx.x + _e3476.yyyy.x));
            let _e3483: vec4<f32> = temporary8_;
            let _e3487: vec4<f32> = constant_registers[16u];
            if all((_e3483.zzzz != _e3487.xxxx)) {
                let _e3493: vec4<f32> = constant_registers[16u];
                temporary8_.x = _e3493.xxxx.x;
            }
            let _e3499: vec4<f32> = constant_registers[9u];
            temporary2_.w = _e3499.xxxx.x;
            let _e3505: vec4<f32> = constant_registers[17u];
            temporary19_.x = _e3505.wwww.x;
            let _e3509: vec4<f32> = temporary2_;
            let _e3513: vec4<f32> = constant_registers[7u];
            let _e3515: vec4<f32> = (_e3509.xyzz - _e3513.xyzz);
            temporary13_.x = _e3515.x;
            temporary13_.y = _e3515.y;
            temporary13_.z = _e3515.z;
            let _e3522: vec4<f32> = temporary13_;
            let _e3524: vec4<f32> = temporary10_;
            temporary19_.y = dot(_e3522.xyzz.xyz, _e3524.xyzz.xyz);
            let _e3530: vec4<f32> = temporary19_;
            let _e3532: vec4<f32> = temporary19_;
            temporary1_.w = (_e3530.yyyy * _e3532.yyyy).x;
            let _e3537: vec4<f32> = temporary13_;
            let _e3539: vec4<f32> = temporary13_;
            temporary12_.x = dot(_e3537.xyzz.xyz, _e3539.xyzz.xyz);
            let _e3545: vec4<f32> = temporary1_;
            let _e3547: vec4<f32> = temporary12_;
            temporary12_.y = (_e3545.wwww - _e3547.xxxx).x;
            let _e3552: vec4<f32> = temporary2_;
            let _e3554: vec4<f32> = temporary2_;
            temporary12_.z = (_e3552.wwww * _e3554.wwww).x;
            let _e3559: vec4<f32> = temporary12_;
            let _e3561: vec4<f32> = temporary12_;
            temporary19_.z = (_e3559.yyyy + _e3561.zzzz).x;
            let _e3568: vec4<f32> = constant_registers[16u];
            let _e3570: vec4<f32> = temporary19_;
            temporary1_.w = f32((_e3568.xxxx.x + _e3570.zzzz.x));
            let _e3577: vec4<f32> = temporary1_;
            let _e3581: vec4<f32> = constant_registers[16u];
            if all((_e3577.wwww != _e3581.xxxx)) {
                let _e3585: vec4<f32> = temporary19_;
                temporary19_.z = sqrt(_e3585.zzzz).x;
                let _e3590: vec4<f32> = temporary19_;
                temporary12_.x = -(_e3590.yyyy).x;
                let _e3595: vec4<f32> = temporary12_;
                let _e3597: vec4<f32> = temporary19_;
                temporary1_.w = (_e3595.xxxx - _e3597.zzzz).x;
                let _e3604: vec4<f32> = constant_registers[16u];
                let _e3606: vec4<f32> = temporary1_;
                temporary12_.x = f32((_e3604.xxxx.x + _e3606.wwww.x));
                let _e3613: vec4<f32> = temporary12_;
                let _e3617: vec4<f32> = constant_registers[16u];
                if all((_e3613.xxxx != _e3617.xxxx)) {
                    let _e3621: vec4<f32> = temporary1_;
                    temporary19_.x = _e3621.wwww.x;
                }
            }
            let _e3625: vec4<f32> = temporary19_;
            let _e3627: vec4<f32> = temporary1_;
            temporary8_.z = f32((_e3625.xxxx.x + _e3627.yyyy.x));
            let _e3634: vec4<f32> = temporary8_;
            let _e3638: vec4<f32> = constant_registers[16u];
            if all((_e3634.zzzz != _e3638.xxxx)) {
                let _e3644: vec4<f32> = constant_registers[16u];
                temporary8_.x = _e3644.xxxx.x;
            }
            let _e3648: vec4<f32> = temporary2_;
            let _e3649: vec4<f32> = _e3648.xyzz;
            temporary15_.x = _e3649.x;
            temporary15_.y = _e3649.y;
            temporary15_.z = _e3649.z;
            let _e3656: vec4<f32> = temporary10_;
            let _e3657: vec4<f32> = _e3656.xyzz;
            temporary17_.x = _e3657.x;
            temporary17_.y = _e3657.y;
            temporary17_.z = _e3657.z;
            let _e3666: vec4<f32> = constant_registers[10u];
            let _e3667: vec4<f32> = _e3666.xyzz;
            temporary18_.x = _e3667.x;
            temporary18_.y = _e3667.y;
            temporary18_.z = _e3667.z;
            let _e3676: vec4<f32> = constant_registers[12u];
            temporary2_.w = _e3676.xxxx.x;
            let _e3682: vec4<f32> = constant_registers[17u];
            temporary19_.x = _e3682.wwww.x;
            let _e3686: vec4<f32> = temporary15_;
            let _e3688: vec4<f32> = temporary18_;
            let _e3690: vec4<f32> = (_e3686.xyzz - _e3688.xyzz);
            temporary13_.x = _e3690.x;
            temporary13_.y = _e3690.y;
            temporary13_.z = _e3690.z;
            let _e3697: vec4<f32> = temporary13_;
            let _e3699: vec4<f32> = temporary17_;
            temporary19_.y = dot(_e3697.xyzz.xyz, _e3699.xyzz.xyz);
            let _e3705: vec4<f32> = temporary19_;
            let _e3707: vec4<f32> = temporary19_;
            temporary1_.w = (_e3705.yyyy * _e3707.yyyy).x;
            let _e3712: vec4<f32> = temporary13_;
            let _e3714: vec4<f32> = temporary13_;
            temporary12_.x = dot(_e3712.xyzz.xyz, _e3714.xyzz.xyz);
            let _e3720: vec4<f32> = temporary1_;
            let _e3722: vec4<f32> = temporary12_;
            temporary12_.y = (_e3720.wwww - _e3722.xxxx).x;
            let _e3727: vec4<f32> = temporary2_;
            let _e3729: vec4<f32> = temporary2_;
            temporary12_.z = (_e3727.wwww * _e3729.wwww).x;
            let _e3734: vec4<f32> = temporary12_;
            let _e3736: vec4<f32> = temporary12_;
            temporary19_.z = (_e3734.yyyy + _e3736.zzzz).x;
            let _e3743: vec4<f32> = constant_registers[16u];
            let _e3745: vec4<f32> = temporary19_;
            temporary1_.w = f32((_e3743.xxxx.x + _e3745.zzzz.x));
            let _e3752: vec4<f32> = temporary1_;
            let _e3756: vec4<f32> = constant_registers[16u];
            if all((_e3752.wwww != _e3756.xxxx)) {
                let _e3760: vec4<f32> = temporary19_;
                temporary19_.z = sqrt(_e3760.zzzz).x;
                let _e3765: vec4<f32> = temporary19_;
                temporary12_.x = -(_e3765.yyyy).x;
                let _e3770: vec4<f32> = temporary12_;
                let _e3772: vec4<f32> = temporary19_;
                temporary12_.y = (_e3770.xxxx - _e3772.zzzz).x;
                let _e3777: vec4<f32> = temporary12_;
                temporary1_.w = _e3777.yyyy.x;
                let _e3783: vec4<f32> = constant_registers[16u];
                let _e3785: vec4<f32> = temporary1_;
                temporary12_.x = f32((_e3783.xxxx.x + _e3785.wwww.x));
                let _e3792: vec4<f32> = temporary12_;
                let _e3796: vec4<f32> = constant_registers[16u];
                if all((_e3792.xxxx != _e3796.xxxx)) {
                    let _e3800: vec4<f32> = temporary1_;
                    temporary19_.x = _e3800.wwww.x;
                }
            }
            let _e3804: vec4<f32> = temporary19_;
            temporary4_.y = _e3804.xxxx.x;
            let _e3808: vec4<f32> = temporary4_;
            let _e3810: vec4<f32> = temporary1_;
            temporary8_.z = f32((_e3808.yyyy.x + _e3810.yyyy.x));
            let _e3817: vec4<f32> = temporary8_;
            let _e3821: vec4<f32> = constant_registers[16u];
            if all((_e3817.zzzz != _e3821.xxxx)) {
                let _e3827: vec4<f32> = constant_registers[16u];
                temporary8_.x = _e3827.xxxx.x;
            }
            let _e3831: vec4<f32> = temporary6_;
            temporary8_.z = saturate(_e3831.yyyy).x;
            let _e3836: vec4<f32> = temporary8_;
            let _e3840: vec4<f32> = constant_registers[19u];
            temporary2_.w = (_e3836.zzzz * _e3840.xxxx).x;
            let _e3845: vec4<f32> = temporary8_;
            let _e3847: vec4<f32> = temporary2_;
            temporary8_.x = (_e3845.xxxx + _e3847.wwww).x;
            let _e3852: vec4<f32> = temporary8_;
            let _e3856: vec4<f32> = constant_registers[19u];
            temporary8_.z = (_e3852.xxxx * _e3856.yyyy).x;
            let _e3863: vec4<f32> = constant_registers[19u];
            let _e3865: vec4<f32> = temporary8_;
            temporary2_.w = (_e3863.zzzz + _e3865.zzzz).x;
            let _e3870: vec4<f32> = temporary2_;
            temporary8_.y = _e3870.wwww.x;
            let _e3874: vec4<f32> = temporary1_;
            let _e3878: vec4<f32> = constant_registers[16u];
            temporary8_.z = f32((_e3874.zzzz.x + _e3878.yyyy.x));
            let _e3885: vec4<f32> = temporary8_;
            let _e3889: vec4<f32> = constant_registers[16u];
            if all((_e3885.zzzz != _e3889.xxxx)) {
                let _e3893: vec4<f32> = temporary2_;
                temporary8_.z = fract(_e3893.xxxx).x;
                let _e3898: vec4<f32> = temporary2_;
                let _e3900: vec4<f32> = temporary8_;
                temporary2_.w = (_e3898.xxxx - _e3900.zzzz).x;
                let _e3905: vec4<f32> = temporary2_;
                temporary15_.x = fract(_e3905.zzzz).x;
                let _e3910: vec4<f32> = temporary2_;
                let _e3912: vec4<f32> = temporary15_;
                temporary15_.y = (_e3910.zzzz - _e3912.xxxx).x;
                let _e3917: vec4<f32> = temporary2_;
                let _e3919: vec4<f32> = temporary15_;
                temporary15_.z = (_e3917.wwww + _e3919.yyyy).x;
                let _e3924: vec4<f32> = temporary15_;
                let _e3928: vec4<f32> = constant_registers[18u];
                temporary1_.x = (_e3924.zzzz / _e3928.xxxx).x;
                let _e3933: vec4<f32> = temporary1_;
                temporary17_.x = fract(_e3933.xxxx).x;
                let _e3938: vec4<f32> = temporary17_;
                let _e3942: vec4<f32> = constant_registers[18u];
                temporary17_.y = (_e3938.xxxx * _e3942.xxxx).x;
                let _e3947: vec4<f32> = temporary17_;
                let _e3951: vec4<f32> = constant_registers[16u];
                temporary17_.z = f32((_e3947.yyyy.x + _e3951.yyyy.x));
                let _e3958: vec4<f32> = temporary17_;
                let _e3962: vec4<f32> = constant_registers[16u];
                if all((_e3958.zzzz != _e3962.xxxx)) {
                    let _e3968: vec4<f32> = constant_registers[13u];
                    let _e3970: vec4<f32> = temporary8_;
                    let _e3972: vec4<f32> = (_e3968.xyzz * _e3970.yyyy);
                    temporary15_.x = _e3972.x;
                    temporary15_.y = _e3972.y;
                    temporary15_.z = _e3972.z;
                    let _e3979: vec4<f32> = temporary0_;
                    let _e3981: vec4<f32> = temporary15_;
                    let _e3983: vec4<f32> = (_e3979.xyzz + _e3981.xyzz);
                    temporary0_.x = _e3983.x;
                    temporary0_.y = _e3983.y;
                    temporary0_.z = _e3983.z;
                } else {
                    let _e3992: vec4<f32> = constant_registers[14u];
                    let _e3994: vec4<f32> = temporary8_;
                    let _e3996: vec4<f32> = (_e3992.xyzz * _e3994.yyyy);
                    temporary15_.x = _e3996.x;
                    temporary15_.y = _e3996.y;
                    temporary15_.z = _e3996.z;
                    let _e4003: vec4<f32> = temporary0_;
                    let _e4005: vec4<f32> = temporary15_;
                    let _e4007: vec4<f32> = (_e4003.xyzz + _e4005.xyzz);
                    temporary0_.x = _e4007.x;
                    temporary0_.y = _e4007.y;
                    temporary0_.z = _e4007.z;
                }
            }
            let _e4014: vec4<f32> = temporary1_;
            let _e4018: vec4<f32> = constant_registers[18u];
            temporary8_.z = f32((_e4014.zzzz.x + _e4018.xxxx.x));
            let _e4025: vec4<f32> = temporary8_;
            let _e4029: vec4<f32> = constant_registers[16u];
            if all((_e4025.zzzz != _e4029.xxxx)) {
                let _e4033: vec4<f32> = temporary7_;
                let _e4035: vec4<f32> = temporary8_;
                let _e4037: vec4<f32> = (_e4033.xyzz * _e4035.yyyy);
                temporary15_.x = _e4037.x;
                temporary15_.y = _e4037.y;
                temporary15_.z = _e4037.z;
                let _e4044: vec4<f32> = temporary0_;
                let _e4046: vec4<f32> = temporary15_;
                let _e4048: vec4<f32> = (_e4044.xyzz + _e4046.xyzz);
                temporary0_.x = _e4048.x;
                temporary0_.y = _e4048.y;
                temporary0_.z = _e4048.z;
            }
            let _e4057: vec4<f32> = constant_registers[16u];
            temporary11_.x = _e4057.yyyy.x;
        }
    }
    let _e4061: vec4<f32> = temporary11_;
    let _e4065: vec4<f32> = constant_registers[16u];
    if all((_e4061.xxxx != _e4065.xxxx)) {
        let _e4071: vec4<f32> = constant_registers[16u];
        temporary1_.z = _e4071.xxxx.x;
        let _e4077: vec4<f32> = constant_registers[17u];
        temporary4_.z = _e4077.wwww.x;
        let _e4083: vec4<f32> = constant_registers[16u];
        let _e4084: vec4<f32> = _e4083.xyxx;
        temporary3_.x = _e4084.x;
        temporary3_.y = _e4084.y;
        temporary3_.z = _e4084.z;
        let _e4091: vec4<f32> = temporary3_;
        let _e4092: vec4<f32> = _e4091.xyzz;
        temporary12_.x = _e4092.x;
        temporary12_.y = _e4092.y;
        temporary12_.z = _e4092.z;
        let _e4101: vec4<f32> = constant_registers[17u];
        temporary2_.w = _e4101.wwww.x;
        let _e4105: vec4<f32> = temporary2_;
        let _e4109: vec4<f32> = constant_registers[16u];
        let _e4111: vec4<f32> = (_e4105.xyzz - _e4109.xxxx);
        temporary20_.x = _e4111.x;
        temporary20_.y = _e4111.y;
        temporary20_.z = _e4111.z;
        let _e4118: vec4<f32> = temporary20_;
        let _e4120: vec4<f32> = temporary12_;
        temporary14_.y = dot(_e4118.xyzz.xyz, _e4120.xyzz.xyz);
        let _e4126: vec4<f32> = temporary14_;
        temporary14_.z = -(_e4126.yyyy).x;
        let _e4131: vec4<f32> = temporary9_;
        let _e4133: vec4<f32> = temporary12_;
        temporary4_.x = dot(_e4131.xyzz.xyz, _e4133.xyzz.xyz);
        let _e4139: vec4<f32> = temporary14_;
        let _e4141: vec4<f32> = temporary4_;
        temporary16_.x = (_e4139.zzzz / _e4141.xxxx).x;
        let _e4146: vec4<f32> = temporary16_;
        temporary14_.x = _e4146.xxxx.x;
        let _e4152: vec4<f32> = constant_registers[16u];
        let _e4154: vec4<f32> = temporary14_;
        temporary14_.y = f32((_e4152.xxxx.x + _e4154.xxxx.x));
        let _e4161: vec4<f32> = temporary14_;
        let _e4165: vec4<f32> = constant_registers[16u];
        if all((_e4161.yyyy != _e4165.xxxx)) {
            let _e4169: vec4<f32> = temporary14_;
            temporary2_.w = _e4169.xxxx.x;
        }
        let _e4173: vec4<f32> = temporary2_;
        temporary4_.y = _e4173.wwww.x;
        let _e4177: vec4<f32> = temporary4_;
        let _e4179: vec4<f32> = temporary4_;
        temporary8_.z = f32((_e4177.yyyy.x + _e4179.zzzz.x));
        let _e4186: vec4<f32> = temporary8_;
        let _e4190: vec4<f32> = constant_registers[16u];
        if all((_e4186.zzzz != _e4190.xxxx)) {
            let _e4194: vec4<f32> = temporary4_;
            temporary4_.z = _e4194.yyyy.x;
            let _e4198: vec4<f32> = temporary3_;
            let _e4199: vec4<f32> = _e4198.xyzz;
            temporary6_.x = _e4199.x;
            temporary6_.y = _e4199.y;
            temporary6_.z = _e4199.z;
            let _e4208: vec4<f32> = constant_registers[16u];
            temporary1_.z = _e4208.yyyy.x;
        }
        let _e4212: vec4<f32> = temporary2_;
        let _e4213: vec4<f32> = _e4212.xyzz;
        temporary15_.x = _e4213.x;
        temporary15_.y = _e4213.y;
        temporary15_.z = _e4213.z;
        let _e4220: vec4<f32> = temporary9_;
        let _e4221: vec4<f32> = _e4220.xyzz;
        temporary17_.x = _e4221.x;
        temporary17_.y = _e4221.y;
        temporary17_.z = _e4221.z;
        let _e4230: vec4<f32> = constant_registers[4u];
        let _e4231: vec4<f32> = _e4230.xyzz;
        temporary18_.x = _e4231.x;
        temporary18_.y = _e4231.y;
        temporary18_.z = _e4231.z;
        let _e4240: vec4<f32> = constant_registers[6u];
        temporary2_.w = _e4240.xxxx.x;
        let _e4244: vec4<f32> = temporary3_;
        let _e4245: vec4<f32> = _e4244.xyzz;
        temporary19_.x = _e4245.x;
        temporary19_.y = _e4245.y;
        temporary19_.z = _e4245.z;
        let _e4254: vec4<f32> = constant_registers[17u];
        temporary13_.x = _e4254.wwww.x;
        let _e4258: vec4<f32> = temporary15_;
        let _e4260: vec4<f32> = temporary18_;
        let _e4262: vec4<f32> = (_e4258.xyzz - _e4260.xyzz);
        temporary12_.x = _e4262.x;
        temporary12_.y = _e4262.y;
        temporary12_.z = _e4262.z;
        let _e4269: vec4<f32> = temporary12_;
        let _e4271: vec4<f32> = temporary17_;
        temporary13_.y = dot(_e4269.xyzz.xyz, _e4271.xyzz.xyz);
        let _e4277: vec4<f32> = temporary13_;
        let _e4279: vec4<f32> = temporary13_;
        temporary3_.w = (_e4277.yyyy * _e4279.yyyy).x;
        let _e4284: vec4<f32> = temporary12_;
        let _e4286: vec4<f32> = temporary12_;
        temporary14_.x = dot(_e4284.xyzz.xyz, _e4286.xyzz.xyz);
        let _e4292: vec4<f32> = temporary3_;
        let _e4294: vec4<f32> = temporary14_;
        temporary14_.y = (_e4292.wwww - _e4294.xxxx).x;
        let _e4299: vec4<f32> = temporary2_;
        let _e4301: vec4<f32> = temporary2_;
        temporary14_.z = (_e4299.wwww * _e4301.wwww).x;
        let _e4306: vec4<f32> = temporary14_;
        let _e4308: vec4<f32> = temporary14_;
        temporary13_.z = (_e4306.yyyy + _e4308.zzzz).x;
        let _e4315: vec4<f32> = constant_registers[16u];
        let _e4317: vec4<f32> = temporary13_;
        temporary3_.w = f32((_e4315.xxxx.x + _e4317.zzzz.x));
        let _e4324: vec4<f32> = temporary3_;
        let _e4328: vec4<f32> = constant_registers[16u];
        if all((_e4324.wwww != _e4328.xxxx)) {
            let _e4332: vec4<f32> = temporary13_;
            temporary13_.z = sqrt(_e4332.zzzz).x;
            let _e4337: vec4<f32> = temporary13_;
            temporary14_.x = -(_e4337.yyyy).x;
            let _e4342: vec4<f32> = temporary14_;
            let _e4344: vec4<f32> = temporary13_;
            temporary14_.y = (_e4342.xxxx - _e4344.zzzz).x;
            let _e4349: vec4<f32> = temporary14_;
            temporary3_.w = _e4349.yyyy.x;
            let _e4355: vec4<f32> = constant_registers[16u];
            let _e4357: vec4<f32> = temporary3_;
            temporary14_.x = f32((_e4355.xxxx.x + _e4357.wwww.x));
            let _e4364: vec4<f32> = temporary14_;
            let _e4368: vec4<f32> = constant_registers[16u];
            if all((_e4364.xxxx != _e4368.xxxx)) {
                let _e4372: vec4<f32> = temporary3_;
                temporary13_.x = _e4372.wwww.x;
                let _e4376: vec4<f32> = temporary17_;
                let _e4378: vec4<f32> = temporary3_;
                let _e4380: vec4<f32> = (_e4376.xyzz * _e4378.wwww);
                temporary14_.x = _e4380.x;
                temporary14_.y = _e4380.y;
                temporary14_.z = _e4380.z;
                let _e4387: vec4<f32> = temporary15_;
                let _e4389: vec4<f32> = temporary14_;
                let _e4391: vec4<f32> = (_e4387.xyzz + _e4389.xyzz);
                temporary20_.x = _e4391.x;
                temporary20_.y = _e4391.y;
                temporary20_.z = _e4391.z;
                let _e4398: vec4<f32> = temporary20_;
                let _e4400: vec4<f32> = temporary18_;
                let _e4402: vec4<f32> = (_e4398.xyzz - _e4400.xyzz);
                temporary16_.x = _e4402.x;
                temporary16_.y = _e4402.y;
                temporary16_.z = _e4402.z;
                let _e4409: vec4<f32> = temporary16_;
                let _e4411: vec4<f32> = normalize(_e4409.xyzz);
                temporary19_.x = _e4411.x;
                temporary19_.y = _e4411.y;
                temporary19_.z = _e4411.z;
            }
        }
        let _e4418: vec4<f32> = temporary13_;
        temporary4_.y = _e4418.xxxx.x;
        let _e4422: vec4<f32> = temporary19_;
        let _e4423: vec4<f32> = _e4422.xyzz;
        temporary3_.x = _e4423.x;
        temporary3_.y = _e4423.y;
        temporary3_.z = _e4423.z;
        let _e4430: vec4<f32> = temporary4_;
        let _e4432: vec4<f32> = temporary4_;
        temporary8_.z = f32((_e4430.yyyy.x + _e4432.zzzz.x));
        let _e4439: vec4<f32> = temporary8_;
        let _e4443: vec4<f32> = constant_registers[16u];
        if all((_e4439.zzzz != _e4443.xxxx)) {
            let _e4447: vec4<f32> = temporary4_;
            temporary4_.z = _e4447.yyyy.x;
            let _e4451: vec4<f32> = temporary3_;
            let _e4452: vec4<f32> = _e4451.xyzz;
            temporary6_.x = _e4452.x;
            temporary6_.y = _e4452.y;
            temporary6_.z = _e4452.z;
            let _e4461: vec4<f32> = constant_registers[5u];
            let _e4462: vec4<f32> = _e4461.xyzz;
            temporary7_.x = _e4462.x;
            temporary7_.y = _e4462.y;
            temporary7_.z = _e4462.z;
            let _e4471: vec4<f32> = constant_registers[18u];
            temporary1_.z = _e4471.xxxx.x;
        }
        let _e4475: vec4<f32> = temporary2_;
        let _e4476: vec4<f32> = _e4475.xyzz;
        temporary15_.x = _e4476.x;
        temporary15_.y = _e4476.y;
        temporary15_.z = _e4476.z;
        let _e4483: vec4<f32> = temporary9_;
        let _e4484: vec4<f32> = _e4483.xyzz;
        temporary17_.x = _e4484.x;
        temporary17_.y = _e4484.y;
        temporary17_.z = _e4484.z;
        let _e4493: vec4<f32> = constant_registers[7u];
        let _e4494: vec4<f32> = _e4493.xyzz;
        temporary18_.x = _e4494.x;
        temporary18_.y = _e4494.y;
        temporary18_.z = _e4494.z;
        let _e4503: vec4<f32> = constant_registers[9u];
        temporary2_.w = _e4503.xxxx.x;
        let _e4507: vec4<f32> = temporary3_;
        let _e4508: vec4<f32> = _e4507.xyzz;
        temporary19_.x = _e4508.x;
        temporary19_.y = _e4508.y;
        temporary19_.z = _e4508.z;
        let _e4517: vec4<f32> = constant_registers[17u];
        temporary13_.x = _e4517.wwww.x;
        let _e4521: vec4<f32> = temporary15_;
        let _e4523: vec4<f32> = temporary18_;
        let _e4525: vec4<f32> = (_e4521.xyzz - _e4523.xyzz);
        temporary12_.x = _e4525.x;
        temporary12_.y = _e4525.y;
        temporary12_.z = _e4525.z;
        let _e4532: vec4<f32> = temporary12_;
        let _e4534: vec4<f32> = temporary17_;
        temporary13_.y = dot(_e4532.xyzz.xyz, _e4534.xyzz.xyz);
        let _e4540: vec4<f32> = temporary13_;
        let _e4542: vec4<f32> = temporary13_;
        temporary3_.w = (_e4540.yyyy * _e4542.yyyy).x;
        let _e4547: vec4<f32> = temporary12_;
        let _e4549: vec4<f32> = temporary12_;
        temporary14_.x = dot(_e4547.xyzz.xyz, _e4549.xyzz.xyz);
        let _e4555: vec4<f32> = temporary3_;
        let _e4557: vec4<f32> = temporary14_;
        temporary14_.y = (_e4555.wwww - _e4557.xxxx).x;
        let _e4562: vec4<f32> = temporary2_;
        let _e4564: vec4<f32> = temporary2_;
        temporary14_.z = (_e4562.wwww * _e4564.wwww).x;
        let _e4569: vec4<f32> = temporary14_;
        let _e4571: vec4<f32> = temporary14_;
        temporary13_.z = (_e4569.yyyy + _e4571.zzzz).x;
        let _e4578: vec4<f32> = constant_registers[16u];
        let _e4580: vec4<f32> = temporary13_;
        temporary3_.w = f32((_e4578.xxxx.x + _e4580.zzzz.x));
        let _e4587: vec4<f32> = temporary3_;
        let _e4591: vec4<f32> = constant_registers[16u];
        if all((_e4587.wwww != _e4591.xxxx)) {
            let _e4595: vec4<f32> = temporary13_;
            temporary13_.z = sqrt(_e4595.zzzz).x;
            let _e4600: vec4<f32> = temporary13_;
            temporary14_.x = -(_e4600.yyyy).x;
            let _e4605: vec4<f32> = temporary14_;
            let _e4607: vec4<f32> = temporary13_;
            temporary14_.y = (_e4605.xxxx - _e4607.zzzz).x;
            let _e4612: vec4<f32> = temporary14_;
            temporary3_.w = _e4612.yyyy.x;
            let _e4618: vec4<f32> = constant_registers[16u];
            let _e4620: vec4<f32> = temporary3_;
            temporary14_.x = f32((_e4618.xxxx.x + _e4620.wwww.x));
            let _e4627: vec4<f32> = temporary14_;
            let _e4631: vec4<f32> = constant_registers[16u];
            if all((_e4627.xxxx != _e4631.xxxx)) {
                let _e4635: vec4<f32> = temporary3_;
                temporary13_.x = _e4635.wwww.x;
                let _e4639: vec4<f32> = temporary17_;
                let _e4641: vec4<f32> = temporary3_;
                let _e4643: vec4<f32> = (_e4639.xyzz * _e4641.wwww);
                temporary14_.x = _e4643.x;
                temporary14_.y = _e4643.y;
                temporary14_.z = _e4643.z;
                let _e4650: vec4<f32> = temporary15_;
                let _e4652: vec4<f32> = temporary14_;
                let _e4654: vec4<f32> = (_e4650.xyzz + _e4652.xyzz);
                temporary20_.x = _e4654.x;
                temporary20_.y = _e4654.y;
                temporary20_.z = _e4654.z;
                let _e4661: vec4<f32> = temporary20_;
                let _e4663: vec4<f32> = temporary18_;
                let _e4665: vec4<f32> = (_e4661.xyzz - _e4663.xyzz);
                temporary16_.x = _e4665.x;
                temporary16_.y = _e4665.y;
                temporary16_.z = _e4665.z;
                let _e4672: vec4<f32> = temporary16_;
                let _e4674: vec4<f32> = normalize(_e4672.xyzz);
                temporary19_.x = _e4674.x;
                temporary19_.y = _e4674.y;
                temporary19_.z = _e4674.z;
            }
        }
        let _e4681: vec4<f32> = temporary13_;
        temporary4_.y = _e4681.xxxx.x;
        let _e4685: vec4<f32> = temporary19_;
        let _e4686: vec4<f32> = _e4685.xyzz;
        temporary3_.x = _e4686.x;
        temporary3_.y = _e4686.y;
        temporary3_.z = _e4686.z;
        let _e4693: vec4<f32> = temporary4_;
        let _e4695: vec4<f32> = temporary4_;
        temporary8_.z = f32((_e4693.yyyy.x + _e4695.zzzz.x));
        let _e4702: vec4<f32> = temporary8_;
        let _e4706: vec4<f32> = constant_registers[16u];
        if all((_e4702.zzzz != _e4706.xxxx)) {
            let _e4710: vec4<f32> = temporary4_;
            temporary4_.z = _e4710.yyyy.x;
            let _e4714: vec4<f32> = temporary3_;
            let _e4715: vec4<f32> = _e4714.xyzz;
            temporary6_.x = _e4715.x;
            temporary6_.y = _e4715.y;
            temporary6_.z = _e4715.z;
            let _e4724: vec4<f32> = constant_registers[8u];
            let _e4725: vec4<f32> = _e4724.xyzz;
            temporary7_.x = _e4725.x;
            temporary7_.y = _e4725.y;
            temporary7_.z = _e4725.z;
            let _e4734: vec4<f32> = constant_registers[18u];
            temporary1_.z = _e4734.xxxx.x;
        }
        let _e4738: vec4<f32> = temporary2_;
        let _e4739: vec4<f32> = _e4738.xyzz;
        temporary15_.x = _e4739.x;
        temporary15_.y = _e4739.y;
        temporary15_.z = _e4739.z;
        let _e4746: vec4<f32> = temporary9_;
        let _e4747: vec4<f32> = _e4746.xyzz;
        temporary17_.x = _e4747.x;
        temporary17_.y = _e4747.y;
        temporary17_.z = _e4747.z;
        let _e4756: vec4<f32> = constant_registers[10u];
        let _e4757: vec4<f32> = _e4756.xyzz;
        temporary18_.x = _e4757.x;
        temporary18_.y = _e4757.y;
        temporary18_.z = _e4757.z;
        let _e4766: vec4<f32> = constant_registers[12u];
        temporary2_.w = _e4766.xxxx.x;
        let _e4770: vec4<f32> = temporary3_;
        let _e4771: vec4<f32> = _e4770.xyzz;
        temporary19_.x = _e4771.x;
        temporary19_.y = _e4771.y;
        temporary19_.z = _e4771.z;
        let _e4780: vec4<f32> = constant_registers[17u];
        temporary13_.x = _e4780.wwww.x;
        let _e4784: vec4<f32> = temporary15_;
        let _e4786: vec4<f32> = temporary18_;
        let _e4788: vec4<f32> = (_e4784.xyzz - _e4786.xyzz);
        temporary12_.x = _e4788.x;
        temporary12_.y = _e4788.y;
        temporary12_.z = _e4788.z;
        let _e4795: vec4<f32> = temporary12_;
        let _e4797: vec4<f32> = temporary17_;
        temporary13_.y = dot(_e4795.xyzz.xyz, _e4797.xyzz.xyz);
        let _e4803: vec4<f32> = temporary13_;
        let _e4805: vec4<f32> = temporary13_;
        temporary3_.w = (_e4803.yyyy * _e4805.yyyy).x;
        let _e4810: vec4<f32> = temporary12_;
        let _e4812: vec4<f32> = temporary12_;
        temporary14_.x = dot(_e4810.xyzz.xyz, _e4812.xyzz.xyz);
        let _e4818: vec4<f32> = temporary3_;
        let _e4820: vec4<f32> = temporary14_;
        temporary14_.y = (_e4818.wwww - _e4820.xxxx).x;
        let _e4825: vec4<f32> = temporary2_;
        let _e4827: vec4<f32> = temporary2_;
        temporary14_.z = (_e4825.wwww * _e4827.wwww).x;
        let _e4832: vec4<f32> = temporary14_;
        let _e4834: vec4<f32> = temporary14_;
        temporary13_.z = (_e4832.yyyy + _e4834.zzzz).x;
        let _e4841: vec4<f32> = constant_registers[16u];
        let _e4843: vec4<f32> = temporary13_;
        temporary3_.w = f32((_e4841.xxxx.x + _e4843.zzzz.x));
        let _e4850: vec4<f32> = temporary3_;
        let _e4854: vec4<f32> = constant_registers[16u];
        if all((_e4850.wwww != _e4854.xxxx)) {
            let _e4858: vec4<f32> = temporary13_;
            temporary13_.z = sqrt(_e4858.zzzz).x;
            let _e4863: vec4<f32> = temporary13_;
            temporary14_.x = -(_e4863.yyyy).x;
            let _e4868: vec4<f32> = temporary14_;
            let _e4870: vec4<f32> = temporary13_;
            temporary14_.y = (_e4868.xxxx - _e4870.zzzz).x;
            let _e4875: vec4<f32> = temporary14_;
            temporary3_.w = _e4875.yyyy.x;
            let _e4881: vec4<f32> = constant_registers[16u];
            let _e4883: vec4<f32> = temporary3_;
            temporary14_.x = f32((_e4881.xxxx.x + _e4883.wwww.x));
            let _e4890: vec4<f32> = temporary14_;
            let _e4894: vec4<f32> = constant_registers[16u];
            if all((_e4890.xxxx != _e4894.xxxx)) {
                let _e4898: vec4<f32> = temporary3_;
                temporary13_.x = _e4898.wwww.x;
                let _e4902: vec4<f32> = temporary17_;
                let _e4904: vec4<f32> = temporary3_;
                let _e4906: vec4<f32> = (_e4902.xyzz * _e4904.wwww);
                temporary14_.x = _e4906.x;
                temporary14_.y = _e4906.y;
                temporary14_.z = _e4906.z;
                let _e4913: vec4<f32> = temporary15_;
                let _e4915: vec4<f32> = temporary14_;
                let _e4917: vec4<f32> = (_e4913.xyzz + _e4915.xyzz);
                temporary20_.x = _e4917.x;
                temporary20_.y = _e4917.y;
                temporary20_.z = _e4917.z;
                let _e4924: vec4<f32> = temporary20_;
                let _e4926: vec4<f32> = temporary18_;
                let _e4928: vec4<f32> = (_e4924.xyzz - _e4926.xyzz);
                temporary16_.x = _e4928.x;
                temporary16_.y = _e4928.y;
                temporary16_.z = _e4928.z;
                let _e4935: vec4<f32> = temporary16_;
                let _e4937: vec4<f32> = normalize(_e4935.xyzz);
                temporary19_.x = _e4937.x;
                temporary19_.y = _e4937.y;
                temporary19_.z = _e4937.z;
            }
        }
        let _e4944: vec4<f32> = temporary13_;
        temporary4_.y = _e4944.xxxx.x;
        let _e4948: vec4<f32> = temporary19_;
        let _e4949: vec4<f32> = _e4948.xyzz;
        temporary3_.x = _e4949.x;
        temporary3_.y = _e4949.y;
        temporary3_.z = _e4949.z;
        let _e4956: vec4<f32> = temporary4_;
        let _e4958: vec4<f32> = temporary4_;
        temporary8_.z = f32((_e4956.yyyy.x + _e4958.zzzz.x));
        let _e4965: vec4<f32> = temporary8_;
        let _e4969: vec4<f32> = constant_registers[16u];
        if all((_e4965.zzzz != _e4969.xxxx)) {
            let _e4973: vec4<f32> = temporary4_;
            temporary4_.z = _e4973.yyyy.x;
            let _e4977: vec4<f32> = temporary3_;
            let _e4978: vec4<f32> = _e4977.xyzz;
            temporary6_.x = _e4978.x;
            temporary6_.y = _e4978.y;
            temporary6_.z = _e4978.z;
            let _e4987: vec4<f32> = constant_registers[11u];
            let _e4988: vec4<f32> = _e4987.xyzz;
            temporary7_.x = _e4988.x;
            temporary7_.y = _e4988.y;
            temporary7_.z = _e4988.z;
            let _e4997: vec4<f32> = constant_registers[18u];
            temporary1_.z = _e4997.xxxx.x;
        }
        let _e5001: vec4<f32> = temporary11_;
        let _e5005: vec4<f32> = constant_registers[16u];
        temporary11_.y = (_e5001.yyyy + _e5005.yyyy).x;
        let _e5010: vec4<f32> = temporary1_;
        let _e5014: vec4<f32> = constant_registers[16u];
        temporary8_.z = f32((_e5010.zzzz.x + _e5014.xxxx.x));
        let _e5021: vec4<f32> = temporary8_;
        let _e5025: vec4<f32> = constant_registers[16u];
        if all((_e5021.zzzz != _e5025.xxxx)) {
            let _e5031: vec4<f32> = constant_registers[16u];
            temporary11_.z = _e5031.yyyy.x;
        } else {
            let _e5035: vec4<f32> = temporary9_;
            let _e5037: vec4<f32> = temporary4_;
            let _e5039: vec4<f32> = (_e5035.xyzz * _e5037.zzzz);
            temporary15_.x = _e5039.x;
            temporary15_.y = _e5039.y;
            temporary15_.z = _e5039.z;
            let _e5046: vec4<f32> = temporary2_;
            let _e5048: vec4<f32> = temporary15_;
            let _e5050: vec4<f32> = (_e5046.xyzz + _e5048.xyzz);
            temporary2_.x = _e5050.x;
            temporary2_.y = _e5050.y;
            temporary2_.z = _e5050.z;
            let _e5057: vec4<f32> = temporary9_;
            let _e5059: vec4<f32> = temporary6_;
            temporary8_.z = dot(_e5057.xyzz.xyz, _e5059.xyzz.xyz);
            let _e5065: vec4<f32> = temporary8_;
            let _e5069: vec4<f32> = constant_registers[18u];
            temporary2_.w = (_e5065.zzzz * _e5069.xxxx).x;
            let _e5074: vec4<f32> = temporary2_;
            let _e5076: vec4<f32> = temporary6_;
            let _e5078: vec4<f32> = (_e5074.wwww * _e5076.xyzz);
            temporary15_.x = _e5078.x;
            temporary15_.y = _e5078.y;
            temporary15_.z = _e5078.z;
            let _e5085: vec4<f32> = temporary9_;
            let _e5087: vec4<f32> = temporary15_;
            let _e5089: vec4<f32> = (_e5085.xyzz - _e5087.xyzz);
            temporary9_.x = _e5089.x;
            temporary9_.y = _e5089.y;
            temporary9_.z = _e5089.z;
            let _e5096: vec4<f32> = temporary9_;
            let _e5100: vec4<f32> = constant_registers[18u];
            let _e5102: vec4<f32> = (_e5096.xyzz * _e5100.yyyy);
            temporary15_.x = _e5102.x;
            temporary15_.y = _e5102.y;
            temporary15_.z = _e5102.z;
            let _e5109: vec4<f32> = temporary2_;
            let _e5111: vec4<f32> = temporary15_;
            let _e5113: vec4<f32> = (_e5109.xyzz + _e5111.xyzz);
            temporary2_.x = _e5113.x;
            temporary2_.y = _e5113.y;
            temporary2_.z = _e5113.z;
            let _e5122: vec4<f32> = constant_registers[15u];
            let _e5124: vec4<f32> = temporary2_;
            let _e5126: vec4<f32> = (_e5122.xyzz - _e5124.xyzz);
            temporary5_.x = _e5126.x;
            temporary5_.y = _e5126.y;
            temporary5_.z = _e5126.z;
            let _e5133: vec4<f32> = temporary5_;
            let _e5135: vec4<f32> = normalize(_e5133.xyzz);
            temporary10_.x = _e5135.x;
            temporary10_.y = _e5135.y;
            temporary10_.z = _e5135.z;
            let _e5142: vec4<f32> = temporary5_;
            let _e5144: vec4<f32> = temporary5_;
            temporary8_.z = dot(_e5142.xyzz.xyz, _e5144.xyzz.xyz);
            let _e5150: vec4<f32> = temporary8_;
            temporary1_.y = sqrt(_e5150.zzzz).x;
            let _e5155: vec4<f32> = temporary6_;
            let _e5157: vec4<f32> = temporary10_;
            temporary8_.z = dot(_e5155.xyzz.xyz, _e5157.xyzz.xyz);
            let _e5163: vec4<f32> = temporary8_;
            temporary2_.w = saturate(_e5163.zzzz).x;
            let _e5168: vec4<f32> = temporary1_;
            let _e5170: vec4<f32> = temporary1_;
            temporary15_.x = (_e5168.yyyy * _e5170.yyyy).x;
            let _e5175: vec4<f32> = temporary15_;
            let _e5179: vec4<f32> = constant_registers[18u];
            temporary15_.y = (_e5175.xxxx * _e5179.zzzz).x;
            let _e5186: vec4<f32> = constant_registers[18u];
            let _e5188: vec4<f32> = temporary15_;
            temporary15_.z = (_e5186.wwww + _e5188.yyyy).x;
            let _e5193: vec4<f32> = temporary2_;
            let _e5195: vec4<f32> = temporary15_;
            temporary1_.x = (_e5193.wwww / _e5195.zzzz).x;
            let _e5200: vec4<f32> = temporary1_;
            temporary8_.x = _e5200.xxxx.x;
            let _e5206: vec4<f32> = constant_registers[6u];
            temporary2_.w = _e5206.xxxx.x;
            let _e5212: vec4<f32> = constant_registers[17u];
            temporary19_.x = _e5212.wwww.x;
            let _e5216: vec4<f32> = temporary2_;
            let _e5220: vec4<f32> = constant_registers[4u];
            let _e5222: vec4<f32> = (_e5216.xyzz - _e5220.xyzz);
            temporary13_.x = _e5222.x;
            temporary13_.y = _e5222.y;
            temporary13_.z = _e5222.z;
            let _e5229: vec4<f32> = temporary13_;
            let _e5231: vec4<f32> = temporary10_;
            temporary19_.y = dot(_e5229.xyzz.xyz, _e5231.xyzz.xyz);
            let _e5237: vec4<f32> = temporary19_;
            let _e5239: vec4<f32> = temporary19_;
            temporary1_.w = (_e5237.yyyy * _e5239.yyyy).x;
            let _e5244: vec4<f32> = temporary13_;
            let _e5246: vec4<f32> = temporary13_;
            temporary12_.x = dot(_e5244.xyzz.xyz, _e5246.xyzz.xyz);
            let _e5252: vec4<f32> = temporary1_;
            let _e5254: vec4<f32> = temporary12_;
            temporary12_.y = (_e5252.wwww - _e5254.xxxx).x;
            let _e5259: vec4<f32> = temporary2_;
            let _e5261: vec4<f32> = temporary2_;
            temporary12_.z = (_e5259.wwww * _e5261.wwww).x;
            let _e5266: vec4<f32> = temporary12_;
            let _e5268: vec4<f32> = temporary12_;
            temporary19_.z = (_e5266.yyyy + _e5268.zzzz).x;
            let _e5275: vec4<f32> = constant_registers[16u];
            let _e5277: vec4<f32> = temporary19_;
            temporary1_.w = f32((_e5275.xxxx.x + _e5277.zzzz.x));
            let _e5284: vec4<f32> = temporary1_;
            let _e5288: vec4<f32> = constant_registers[16u];
            if all((_e5284.wwww != _e5288.xxxx)) {
                let _e5292: vec4<f32> = temporary19_;
                temporary19_.z = sqrt(_e5292.zzzz).x;
                let _e5297: vec4<f32> = temporary19_;
                temporary12_.x = -(_e5297.yyyy).x;
                let _e5302: vec4<f32> = temporary12_;
                let _e5304: vec4<f32> = temporary19_;
                temporary1_.w = (_e5302.xxxx - _e5304.zzzz).x;
                let _e5311: vec4<f32> = constant_registers[16u];
                let _e5313: vec4<f32> = temporary1_;
                temporary12_.x = f32((_e5311.xxxx.x + _e5313.wwww.x));
                let _e5320: vec4<f32> = temporary12_;
                let _e5324: vec4<f32> = constant_registers[16u];
                if all((_e5320.xxxx != _e5324.xxxx)) {
                    let _e5328: vec4<f32> = temporary1_;
                    temporary19_.x = _e5328.wwww.x;
                }
            }
            let _e5332: vec4<f32> = temporary19_;
            let _e5334: vec4<f32> = temporary1_;
            temporary8_.z = f32((_e5332.xxxx.x + _e5334.yyyy.x));
            let _e5341: vec4<f32> = temporary8_;
            let _e5345: vec4<f32> = constant_registers[16u];
            if all((_e5341.zzzz != _e5345.xxxx)) {
                let _e5351: vec4<f32> = constant_registers[16u];
                temporary8_.x = _e5351.xxxx.x;
            }
            let _e5357: vec4<f32> = constant_registers[9u];
            temporary2_.w = _e5357.xxxx.x;
            let _e5363: vec4<f32> = constant_registers[17u];
            temporary19_.x = _e5363.wwww.x;
            let _e5367: vec4<f32> = temporary2_;
            let _e5371: vec4<f32> = constant_registers[7u];
            let _e5373: vec4<f32> = (_e5367.xyzz - _e5371.xyzz);
            temporary13_.x = _e5373.x;
            temporary13_.y = _e5373.y;
            temporary13_.z = _e5373.z;
            let _e5380: vec4<f32> = temporary13_;
            let _e5382: vec4<f32> = temporary10_;
            temporary19_.y = dot(_e5380.xyzz.xyz, _e5382.xyzz.xyz);
            let _e5388: vec4<f32> = temporary19_;
            let _e5390: vec4<f32> = temporary19_;
            temporary1_.w = (_e5388.yyyy * _e5390.yyyy).x;
            let _e5395: vec4<f32> = temporary13_;
            let _e5397: vec4<f32> = temporary13_;
            temporary12_.x = dot(_e5395.xyzz.xyz, _e5397.xyzz.xyz);
            let _e5403: vec4<f32> = temporary1_;
            let _e5405: vec4<f32> = temporary12_;
            temporary12_.y = (_e5403.wwww - _e5405.xxxx).x;
            let _e5410: vec4<f32> = temporary2_;
            let _e5412: vec4<f32> = temporary2_;
            temporary12_.z = (_e5410.wwww * _e5412.wwww).x;
            let _e5417: vec4<f32> = temporary12_;
            let _e5419: vec4<f32> = temporary12_;
            temporary19_.z = (_e5417.yyyy + _e5419.zzzz).x;
            let _e5426: vec4<f32> = constant_registers[16u];
            let _e5428: vec4<f32> = temporary19_;
            temporary1_.w = f32((_e5426.xxxx.x + _e5428.zzzz.x));
            let _e5435: vec4<f32> = temporary1_;
            let _e5439: vec4<f32> = constant_registers[16u];
            if all((_e5435.wwww != _e5439.xxxx)) {
                let _e5443: vec4<f32> = temporary19_;
                temporary19_.z = sqrt(_e5443.zzzz).x;
                let _e5448: vec4<f32> = temporary19_;
                temporary12_.x = -(_e5448.yyyy).x;
                let _e5453: vec4<f32> = temporary12_;
                let _e5455: vec4<f32> = temporary19_;
                temporary1_.w = (_e5453.xxxx - _e5455.zzzz).x;
                let _e5462: vec4<f32> = constant_registers[16u];
                let _e5464: vec4<f32> = temporary1_;
                temporary12_.x = f32((_e5462.xxxx.x + _e5464.wwww.x));
                let _e5471: vec4<f32> = temporary12_;
                let _e5475: vec4<f32> = constant_registers[16u];
                if all((_e5471.xxxx != _e5475.xxxx)) {
                    let _e5479: vec4<f32> = temporary1_;
                    temporary19_.x = _e5479.wwww.x;
                }
            }
            let _e5483: vec4<f32> = temporary19_;
            let _e5485: vec4<f32> = temporary1_;
            temporary8_.z = f32((_e5483.xxxx.x + _e5485.yyyy.x));
            let _e5492: vec4<f32> = temporary8_;
            let _e5496: vec4<f32> = constant_registers[16u];
            if all((_e5492.zzzz != _e5496.xxxx)) {
                let _e5502: vec4<f32> = constant_registers[16u];
                temporary8_.x = _e5502.xxxx.x;
            }
            let _e5506: vec4<f32> = temporary2_;
            let _e5507: vec4<f32> = _e5506.xyzz;
            temporary15_.x = _e5507.x;
            temporary15_.y = _e5507.y;
            temporary15_.z = _e5507.z;
            let _e5514: vec4<f32> = temporary10_;
            let _e5515: vec4<f32> = _e5514.xyzz;
            temporary17_.x = _e5515.x;
            temporary17_.y = _e5515.y;
            temporary17_.z = _e5515.z;
            let _e5524: vec4<f32> = constant_registers[12u];
            temporary2_.w = _e5524.xxxx.x;
            let _e5530: vec4<f32> = constant_registers[17u];
            temporary19_.x = _e5530.wwww.x;
            let _e5534: vec4<f32> = temporary15_;
            let _e5538: vec4<f32> = constant_registers[10u];
            let _e5540: vec4<f32> = (_e5534.xyzz - _e5538.xyzz);
            temporary13_.x = _e5540.x;
            temporary13_.y = _e5540.y;
            temporary13_.z = _e5540.z;
            let _e5547: vec4<f32> = temporary13_;
            let _e5549: vec4<f32> = temporary17_;
            temporary19_.y = dot(_e5547.xyzz.xyz, _e5549.xyzz.xyz);
            let _e5555: vec4<f32> = temporary19_;
            let _e5557: vec4<f32> = temporary19_;
            temporary1_.w = (_e5555.yyyy * _e5557.yyyy).x;
            let _e5562: vec4<f32> = temporary13_;
            let _e5564: vec4<f32> = temporary13_;
            temporary12_.x = dot(_e5562.xyzz.xyz, _e5564.xyzz.xyz);
            let _e5570: vec4<f32> = temporary1_;
            let _e5572: vec4<f32> = temporary12_;
            temporary12_.y = (_e5570.wwww - _e5572.xxxx).x;
            let _e5577: vec4<f32> = temporary2_;
            let _e5579: vec4<f32> = temporary2_;
            temporary12_.z = (_e5577.wwww * _e5579.wwww).x;
            let _e5584: vec4<f32> = temporary12_;
            let _e5586: vec4<f32> = temporary12_;
            temporary19_.z = (_e5584.yyyy + _e5586.zzzz).x;
            let _e5593: vec4<f32> = constant_registers[16u];
            let _e5595: vec4<f32> = temporary19_;
            temporary1_.w = f32((_e5593.xxxx.x + _e5595.zzzz.x));
            let _e5602: vec4<f32> = temporary1_;
            let _e5606: vec4<f32> = constant_registers[16u];
            if all((_e5602.wwww != _e5606.xxxx)) {
                let _e5610: vec4<f32> = temporary19_;
                temporary19_.z = sqrt(_e5610.zzzz).x;
                let _e5615: vec4<f32> = temporary19_;
                temporary12_.x = -(_e5615.yyyy).x;
                let _e5620: vec4<f32> = temporary12_;
                let _e5622: vec4<f32> = temporary19_;
                temporary1_.w = (_e5620.xxxx - _e5622.zzzz).x;
                let _e5629: vec4<f32> = constant_registers[16u];
                let _e5631: vec4<f32> = temporary1_;
                temporary12_.x = f32((_e5629.xxxx.x + _e5631.wwww.x));
                let _e5638: vec4<f32> = temporary12_;
                let _e5642: vec4<f32> = constant_registers[16u];
                if all((_e5638.xxxx != _e5642.xxxx)) {
                    let _e5646: vec4<f32> = temporary1_;
                    temporary19_.x = _e5646.wwww.x;
                }
            }
            let _e5650: vec4<f32> = temporary19_;
            let _e5652: vec4<f32> = temporary1_;
            temporary8_.z = f32((_e5650.xxxx.x + _e5652.yyyy.x));
            let _e5659: vec4<f32> = temporary8_;
            let _e5663: vec4<f32> = constant_registers[16u];
            if all((_e5659.zzzz != _e5663.xxxx)) {
                let _e5669: vec4<f32> = constant_registers[16u];
                temporary8_.x = _e5669.xxxx.x;
            }
            let _e5673: vec4<f32> = temporary6_;
            temporary8_.z = saturate(_e5673.yyyy).x;
            let _e5678: vec4<f32> = temporary8_;
            let _e5682: vec4<f32> = constant_registers[19u];
            temporary2_.w = (_e5678.zzzz * _e5682.xxxx).x;
            let _e5687: vec4<f32> = temporary8_;
            let _e5689: vec4<f32> = temporary2_;
            temporary8_.x = (_e5687.xxxx + _e5689.wwww).x;
            let _e5694: vec4<f32> = temporary8_;
            let _e5698: vec4<f32> = constant_registers[19u];
            temporary8_.z = (_e5694.xxxx * _e5698.yyyy).x;
            let _e5705: vec4<f32> = constant_registers[19u];
            let _e5707: vec4<f32> = temporary8_;
            temporary2_.w = (_e5705.zzzz + _e5707.zzzz).x;
            let _e5712: vec4<f32> = temporary2_;
            temporary8_.y = _e5712.wwww.x;
            let _e5716: vec4<f32> = temporary1_;
            let _e5720: vec4<f32> = constant_registers[16u];
            temporary8_.z = f32((_e5716.zzzz.x + _e5720.yyyy.x));
            let _e5727: vec4<f32> = temporary8_;
            let _e5731: vec4<f32> = constant_registers[16u];
            if all((_e5727.zzzz != _e5731.xxxx)) {
                let _e5735: vec4<f32> = temporary2_;
                temporary8_.z = fract(_e5735.xxxx).x;
                let _e5740: vec4<f32> = temporary2_;
                let _e5742: vec4<f32> = temporary8_;
                temporary2_.w = (_e5740.xxxx - _e5742.zzzz).x;
                let _e5747: vec4<f32> = temporary2_;
                temporary15_.x = fract(_e5747.zzzz).x;
                let _e5752: vec4<f32> = temporary2_;
                let _e5754: vec4<f32> = temporary15_;
                temporary15_.y = (_e5752.zzzz - _e5754.xxxx).x;
                let _e5759: vec4<f32> = temporary2_;
                let _e5761: vec4<f32> = temporary15_;
                temporary15_.z = (_e5759.wwww + _e5761.yyyy).x;
                let _e5766: vec4<f32> = temporary15_;
                let _e5770: vec4<f32> = constant_registers[18u];
                temporary1_.x = (_e5766.zzzz / _e5770.xxxx).x;
                let _e5775: vec4<f32> = temporary1_;
                temporary17_.x = fract(_e5775.xxxx).x;
                let _e5780: vec4<f32> = temporary17_;
                let _e5784: vec4<f32> = constant_registers[18u];
                temporary17_.y = (_e5780.xxxx * _e5784.xxxx).x;
                let _e5789: vec4<f32> = temporary17_;
                let _e5793: vec4<f32> = constant_registers[16u];
                temporary17_.z = f32((_e5789.yyyy.x + _e5793.yyyy.x));
                let _e5800: vec4<f32> = temporary17_;
                let _e5804: vec4<f32> = constant_registers[16u];
                if all((_e5800.zzzz != _e5804.xxxx)) {
                    let _e5810: vec4<f32> = constant_registers[13u];
                    let _e5812: vec4<f32> = temporary8_;
                    let _e5814: vec4<f32> = (_e5810.xyzz * _e5812.yyyy);
                    temporary15_.x = _e5814.x;
                    temporary15_.y = _e5814.y;
                    temporary15_.z = _e5814.z;
                    let _e5821: vec4<f32> = temporary0_;
                    let _e5823: vec4<f32> = temporary15_;
                    let _e5825: vec4<f32> = (_e5821.xyzz + _e5823.xyzz);
                    temporary0_.x = _e5825.x;
                    temporary0_.y = _e5825.y;
                    temporary0_.z = _e5825.z;
                } else {
                    let _e5834: vec4<f32> = constant_registers[14u];
                    let _e5836: vec4<f32> = temporary8_;
                    let _e5838: vec4<f32> = (_e5834.xyzz * _e5836.yyyy);
                    temporary15_.x = _e5838.x;
                    temporary15_.y = _e5838.y;
                    temporary15_.z = _e5838.z;
                    let _e5845: vec4<f32> = temporary0_;
                    let _e5847: vec4<f32> = temporary15_;
                    let _e5849: vec4<f32> = (_e5845.xyzz + _e5847.xyzz);
                    temporary0_.x = _e5849.x;
                    temporary0_.y = _e5849.y;
                    temporary0_.z = _e5849.z;
                }
            }
            let _e5856: vec4<f32> = temporary1_;
            let _e5860: vec4<f32> = constant_registers[18u];
            temporary8_.z = f32((_e5856.zzzz.x + _e5860.xxxx.x));
            let _e5867: vec4<f32> = temporary8_;
            let _e5871: vec4<f32> = constant_registers[16u];
            if all((_e5867.zzzz != _e5871.xxxx)) {
                let _e5875: vec4<f32> = temporary7_;
                let _e5877: vec4<f32> = temporary8_;
                let _e5879: vec4<f32> = (_e5875.xyzz * _e5877.yyyy);
                temporary15_.x = _e5879.x;
                temporary15_.y = _e5879.y;
                temporary15_.z = _e5879.z;
                let _e5886: vec4<f32> = temporary0_;
                let _e5888: vec4<f32> = temporary15_;
                let _e5890: vec4<f32> = (_e5886.xyzz + _e5888.xyzz);
                temporary0_.x = _e5890.x;
                temporary0_.y = _e5890.y;
                temporary0_.z = _e5890.z;
            }
        }
    }
    let _e5897: vec4<f32> = temporary9_;
    let _e5901: vec4<f32> = textureSample(texture0_, sampler2_, _e5897.xyzz.xyz);
    temporary1_ = _e5901;
    let _e5902: vec4<f32> = temporary11_;
    let _e5906: vec4<f32> = constant_registers[16u];
    if all((_e5902.zzzz != _e5906.xxxx)) {
        let _e5910: vec4<f32> = temporary0_;
        let _e5912: vec4<f32> = temporary1_;
        let _e5914: vec4<f32> = (_e5910.xyzz + _e5912.xyzz);
        temporary0_.x = _e5914.x;
        temporary0_.y = _e5914.y;
        temporary0_.z = _e5914.z;
    }
    let _e5921: vec4<f32> = temporary0_;
    let _e5923: vec4<f32> = temporary11_;
    let _e5925: vec4<f32> = (_e5921.xyzz / _e5923.yyyy);
    temporary0_.x = _e5925.x;
    temporary0_.y = _e5925.y;
    temporary0_.z = _e5925.z;
    let _e5932: vec4<f32> = temporary0_;
    dest_temp = _e5932;
    let _e5933: vec4<f32> = dest_temp;
    return FragmentOutput(_e5933);
}

